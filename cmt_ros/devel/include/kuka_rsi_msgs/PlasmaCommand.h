// Generated by gencpp from file kuka_rsi_msgs/PlasmaCommand.msg
// DO NOT EDIT!


#ifndef KUKA_RSI_MSGS_MESSAGE_PLASMACOMMAND_H
#define KUKA_RSI_MSGS_MESSAGE_PLASMACOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace kuka_rsi_msgs
{
template <class ContainerAllocator>
struct PlasmaCommand_
{
  typedef PlasmaCommand_<ContainerAllocator> Type;

  PlasmaCommand_()
    : header()
    , Dinse_wire_feed_speed(0.0)
    , EWM_current(0.0)
    , EWM_plasma_gas(0.0)
    , EWM_shield_gas(0.0)
    , Dinse_start_release(false)
    , Dinse_acknowledge_fault(false)
    , Dinse_start_wire_feed(false)
    , Dinse_start_power_source(false)
    , Dinse_wirebreak(false)
    , Dinse_wire_forward(false)
    , Dinse_wire_backward(false)
    , Dinse_gas_on(false)
    , Dinse_retraction(false)
    , Dinse_positioning(false)
    , EWM_Start(false)
    , EWM_gas_test_1_shield(false)
    , EWM_gas_test_2_plasma(false)
    , EWM_feed_wire(false)
    , EWM_unfeed_wire(false)
    , EWM_position_search(false)
    , EWM_error_reset(false)
    , EWM_start_aux_process(false)
    , EWM_user_relay(false)
    , EWM_welding_simulation(false)
    , EWM_monitoring_function(false)
    , EWM_filler_wire_activated(false)
    , EWM_reserved_1(false)
    , EWM_weld_mode_select_bit_0(false)
    , EWM_weld_mode_select_bit_1(false)
    , EWM_wirefeeder_switch(false)
    , EWM_reserved_2(false)
    , EWM_cold_wire_feed_speed(0.0)
    , EWM_job_number(0)  {
    }
  PlasmaCommand_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , Dinse_wire_feed_speed(0.0)
    , EWM_current(0.0)
    , EWM_plasma_gas(0.0)
    , EWM_shield_gas(0.0)
    , Dinse_start_release(false)
    , Dinse_acknowledge_fault(false)
    , Dinse_start_wire_feed(false)
    , Dinse_start_power_source(false)
    , Dinse_wirebreak(false)
    , Dinse_wire_forward(false)
    , Dinse_wire_backward(false)
    , Dinse_gas_on(false)
    , Dinse_retraction(false)
    , Dinse_positioning(false)
    , EWM_Start(false)
    , EWM_gas_test_1_shield(false)
    , EWM_gas_test_2_plasma(false)
    , EWM_feed_wire(false)
    , EWM_unfeed_wire(false)
    , EWM_position_search(false)
    , EWM_error_reset(false)
    , EWM_start_aux_process(false)
    , EWM_user_relay(false)
    , EWM_welding_simulation(false)
    , EWM_monitoring_function(false)
    , EWM_filler_wire_activated(false)
    , EWM_reserved_1(false)
    , EWM_weld_mode_select_bit_0(false)
    , EWM_weld_mode_select_bit_1(false)
    , EWM_wirefeeder_switch(false)
    , EWM_reserved_2(false)
    , EWM_cold_wire_feed_speed(0.0)
    , EWM_job_number(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _Dinse_wire_feed_speed_type;
  _Dinse_wire_feed_speed_type Dinse_wire_feed_speed;

   typedef float _EWM_current_type;
  _EWM_current_type EWM_current;

   typedef float _EWM_plasma_gas_type;
  _EWM_plasma_gas_type EWM_plasma_gas;

   typedef float _EWM_shield_gas_type;
  _EWM_shield_gas_type EWM_shield_gas;

   typedef uint8_t _Dinse_start_release_type;
  _Dinse_start_release_type Dinse_start_release;

   typedef uint8_t _Dinse_acknowledge_fault_type;
  _Dinse_acknowledge_fault_type Dinse_acknowledge_fault;

   typedef uint8_t _Dinse_start_wire_feed_type;
  _Dinse_start_wire_feed_type Dinse_start_wire_feed;

   typedef uint8_t _Dinse_start_power_source_type;
  _Dinse_start_power_source_type Dinse_start_power_source;

   typedef uint8_t _Dinse_wirebreak_type;
  _Dinse_wirebreak_type Dinse_wirebreak;

   typedef uint8_t _Dinse_wire_forward_type;
  _Dinse_wire_forward_type Dinse_wire_forward;

   typedef uint8_t _Dinse_wire_backward_type;
  _Dinse_wire_backward_type Dinse_wire_backward;

   typedef uint8_t _Dinse_gas_on_type;
  _Dinse_gas_on_type Dinse_gas_on;

   typedef uint8_t _Dinse_retraction_type;
  _Dinse_retraction_type Dinse_retraction;

   typedef uint8_t _Dinse_positioning_type;
  _Dinse_positioning_type Dinse_positioning;

   typedef uint8_t _EWM_Start_type;
  _EWM_Start_type EWM_Start;

   typedef uint8_t _EWM_gas_test_1_shield_type;
  _EWM_gas_test_1_shield_type EWM_gas_test_1_shield;

   typedef uint8_t _EWM_gas_test_2_plasma_type;
  _EWM_gas_test_2_plasma_type EWM_gas_test_2_plasma;

   typedef uint8_t _EWM_feed_wire_type;
  _EWM_feed_wire_type EWM_feed_wire;

   typedef uint8_t _EWM_unfeed_wire_type;
  _EWM_unfeed_wire_type EWM_unfeed_wire;

   typedef uint8_t _EWM_position_search_type;
  _EWM_position_search_type EWM_position_search;

   typedef uint8_t _EWM_error_reset_type;
  _EWM_error_reset_type EWM_error_reset;

   typedef uint8_t _EWM_start_aux_process_type;
  _EWM_start_aux_process_type EWM_start_aux_process;

   typedef uint8_t _EWM_user_relay_type;
  _EWM_user_relay_type EWM_user_relay;

   typedef uint8_t _EWM_welding_simulation_type;
  _EWM_welding_simulation_type EWM_welding_simulation;

   typedef uint8_t _EWM_monitoring_function_type;
  _EWM_monitoring_function_type EWM_monitoring_function;

   typedef uint8_t _EWM_filler_wire_activated_type;
  _EWM_filler_wire_activated_type EWM_filler_wire_activated;

   typedef uint8_t _EWM_reserved_1_type;
  _EWM_reserved_1_type EWM_reserved_1;

   typedef uint8_t _EWM_weld_mode_select_bit_0_type;
  _EWM_weld_mode_select_bit_0_type EWM_weld_mode_select_bit_0;

   typedef uint8_t _EWM_weld_mode_select_bit_1_type;
  _EWM_weld_mode_select_bit_1_type EWM_weld_mode_select_bit_1;

   typedef uint8_t _EWM_wirefeeder_switch_type;
  _EWM_wirefeeder_switch_type EWM_wirefeeder_switch;

   typedef uint8_t _EWM_reserved_2_type;
  _EWM_reserved_2_type EWM_reserved_2;

   typedef float _EWM_cold_wire_feed_speed_type;
  _EWM_cold_wire_feed_speed_type EWM_cold_wire_feed_speed;

   typedef uint8_t _EWM_job_number_type;
  _EWM_job_number_type EWM_job_number;





  typedef boost::shared_ptr< ::kuka_rsi_msgs::PlasmaCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kuka_rsi_msgs::PlasmaCommand_<ContainerAllocator> const> ConstPtr;

}; // struct PlasmaCommand_

typedef ::kuka_rsi_msgs::PlasmaCommand_<std::allocator<void> > PlasmaCommand;

typedef boost::shared_ptr< ::kuka_rsi_msgs::PlasmaCommand > PlasmaCommandPtr;
typedef boost::shared_ptr< ::kuka_rsi_msgs::PlasmaCommand const> PlasmaCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kuka_rsi_msgs::PlasmaCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kuka_rsi_msgs::PlasmaCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kuka_rsi_msgs::PlasmaCommand_<ContainerAllocator1> & lhs, const ::kuka_rsi_msgs::PlasmaCommand_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.Dinse_wire_feed_speed == rhs.Dinse_wire_feed_speed &&
    lhs.EWM_current == rhs.EWM_current &&
    lhs.EWM_plasma_gas == rhs.EWM_plasma_gas &&
    lhs.EWM_shield_gas == rhs.EWM_shield_gas &&
    lhs.Dinse_start_release == rhs.Dinse_start_release &&
    lhs.Dinse_acknowledge_fault == rhs.Dinse_acknowledge_fault &&
    lhs.Dinse_start_wire_feed == rhs.Dinse_start_wire_feed &&
    lhs.Dinse_start_power_source == rhs.Dinse_start_power_source &&
    lhs.Dinse_wirebreak == rhs.Dinse_wirebreak &&
    lhs.Dinse_wire_forward == rhs.Dinse_wire_forward &&
    lhs.Dinse_wire_backward == rhs.Dinse_wire_backward &&
    lhs.Dinse_gas_on == rhs.Dinse_gas_on &&
    lhs.Dinse_retraction == rhs.Dinse_retraction &&
    lhs.Dinse_positioning == rhs.Dinse_positioning &&
    lhs.EWM_Start == rhs.EWM_Start &&
    lhs.EWM_gas_test_1_shield == rhs.EWM_gas_test_1_shield &&
    lhs.EWM_gas_test_2_plasma == rhs.EWM_gas_test_2_plasma &&
    lhs.EWM_feed_wire == rhs.EWM_feed_wire &&
    lhs.EWM_unfeed_wire == rhs.EWM_unfeed_wire &&
    lhs.EWM_position_search == rhs.EWM_position_search &&
    lhs.EWM_error_reset == rhs.EWM_error_reset &&
    lhs.EWM_start_aux_process == rhs.EWM_start_aux_process &&
    lhs.EWM_user_relay == rhs.EWM_user_relay &&
    lhs.EWM_welding_simulation == rhs.EWM_welding_simulation &&
    lhs.EWM_monitoring_function == rhs.EWM_monitoring_function &&
    lhs.EWM_filler_wire_activated == rhs.EWM_filler_wire_activated &&
    lhs.EWM_reserved_1 == rhs.EWM_reserved_1 &&
    lhs.EWM_weld_mode_select_bit_0 == rhs.EWM_weld_mode_select_bit_0 &&
    lhs.EWM_weld_mode_select_bit_1 == rhs.EWM_weld_mode_select_bit_1 &&
    lhs.EWM_wirefeeder_switch == rhs.EWM_wirefeeder_switch &&
    lhs.EWM_reserved_2 == rhs.EWM_reserved_2 &&
    lhs.EWM_cold_wire_feed_speed == rhs.EWM_cold_wire_feed_speed &&
    lhs.EWM_job_number == rhs.EWM_job_number;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kuka_rsi_msgs::PlasmaCommand_<ContainerAllocator1> & lhs, const ::kuka_rsi_msgs::PlasmaCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kuka_rsi_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kuka_rsi_msgs::PlasmaCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuka_rsi_msgs::PlasmaCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuka_rsi_msgs::PlasmaCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuka_rsi_msgs::PlasmaCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuka_rsi_msgs::PlasmaCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuka_rsi_msgs::PlasmaCommand_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kuka_rsi_msgs::PlasmaCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e908814e1fa1f45ddd9838e2ac41ab4e";
  }

  static const char* value(const ::kuka_rsi_msgs::PlasmaCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe908814e1fa1f45dULL;
  static const uint64_t static_value2 = 0xdd9838e2ac41ab4eULL;
};

template<class ContainerAllocator>
struct DataType< ::kuka_rsi_msgs::PlasmaCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kuka_rsi_msgs/PlasmaCommand";
  }

  static const char* value(const ::kuka_rsi_msgs::PlasmaCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kuka_rsi_msgs::PlasmaCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"# Field 3-4\n"
"float32 Dinse_wire_feed_speed\n"
"# Field 8-9\n"
"float32 EWM_current\n"
"# Field 12-13\n"
"float32 EWM_plasma_gas\n"
"# Field 14-15\n"
"float32 EWM_shield_gas\n"
"# Field 1\n"
"bool Dinse_start_release\n"
"bool Dinse_acknowledge_fault\n"
"bool Dinse_start_wire_feed\n"
"bool Dinse_start_power_source\n"
"bool Dinse_wirebreak\n"
"bool Dinse_wire_forward\n"
"bool Dinse_wire_backward\n"
"bool Dinse_gas_on\n"
"# Field 2\n"
"bool Dinse_retraction\n"
"bool Dinse_positioning\n"
"# Field 5\n"
"bool EWM_Start\n"
"# Field 6\n"
"bool EWM_gas_test_1_shield\n"
"bool EWM_gas_test_2_plasma\n"
"bool EWM_feed_wire\n"
"bool EWM_unfeed_wire\n"
"bool EWM_position_search\n"
"bool EWM_error_reset\n"
"bool EWM_start_aux_process\n"
"bool EWM_user_relay\n"
"# Field 7\n"
"bool EWM_welding_simulation\n"
"bool EWM_monitoring_function\n"
"bool EWM_filler_wire_activated\n"
"bool EWM_reserved_1\n"
"bool EWM_weld_mode_select_bit_0\n"
"bool EWM_weld_mode_select_bit_1\n"
"bool EWM_wirefeeder_switch\n"
"bool EWM_reserved_2\n"
"# Field 10-11\n"
"float32 EWM_cold_wire_feed_speed\n"
"# Field 16\n"
"uint8 EWM_job_number\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::kuka_rsi_msgs::PlasmaCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kuka_rsi_msgs::PlasmaCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.Dinse_wire_feed_speed);
      stream.next(m.EWM_current);
      stream.next(m.EWM_plasma_gas);
      stream.next(m.EWM_shield_gas);
      stream.next(m.Dinse_start_release);
      stream.next(m.Dinse_acknowledge_fault);
      stream.next(m.Dinse_start_wire_feed);
      stream.next(m.Dinse_start_power_source);
      stream.next(m.Dinse_wirebreak);
      stream.next(m.Dinse_wire_forward);
      stream.next(m.Dinse_wire_backward);
      stream.next(m.Dinse_gas_on);
      stream.next(m.Dinse_retraction);
      stream.next(m.Dinse_positioning);
      stream.next(m.EWM_Start);
      stream.next(m.EWM_gas_test_1_shield);
      stream.next(m.EWM_gas_test_2_plasma);
      stream.next(m.EWM_feed_wire);
      stream.next(m.EWM_unfeed_wire);
      stream.next(m.EWM_position_search);
      stream.next(m.EWM_error_reset);
      stream.next(m.EWM_start_aux_process);
      stream.next(m.EWM_user_relay);
      stream.next(m.EWM_welding_simulation);
      stream.next(m.EWM_monitoring_function);
      stream.next(m.EWM_filler_wire_activated);
      stream.next(m.EWM_reserved_1);
      stream.next(m.EWM_weld_mode_select_bit_0);
      stream.next(m.EWM_weld_mode_select_bit_1);
      stream.next(m.EWM_wirefeeder_switch);
      stream.next(m.EWM_reserved_2);
      stream.next(m.EWM_cold_wire_feed_speed);
      stream.next(m.EWM_job_number);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlasmaCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kuka_rsi_msgs::PlasmaCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kuka_rsi_msgs::PlasmaCommand_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "Dinse_wire_feed_speed: ";
    Printer<float>::stream(s, indent + "  ", v.Dinse_wire_feed_speed);
    s << indent << "EWM_current: ";
    Printer<float>::stream(s, indent + "  ", v.EWM_current);
    s << indent << "EWM_plasma_gas: ";
    Printer<float>::stream(s, indent + "  ", v.EWM_plasma_gas);
    s << indent << "EWM_shield_gas: ";
    Printer<float>::stream(s, indent + "  ", v.EWM_shield_gas);
    s << indent << "Dinse_start_release: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Dinse_start_release);
    s << indent << "Dinse_acknowledge_fault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Dinse_acknowledge_fault);
    s << indent << "Dinse_start_wire_feed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Dinse_start_wire_feed);
    s << indent << "Dinse_start_power_source: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Dinse_start_power_source);
    s << indent << "Dinse_wirebreak: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Dinse_wirebreak);
    s << indent << "Dinse_wire_forward: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Dinse_wire_forward);
    s << indent << "Dinse_wire_backward: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Dinse_wire_backward);
    s << indent << "Dinse_gas_on: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Dinse_gas_on);
    s << indent << "Dinse_retraction: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Dinse_retraction);
    s << indent << "Dinse_positioning: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Dinse_positioning);
    s << indent << "EWM_Start: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EWM_Start);
    s << indent << "EWM_gas_test_1_shield: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EWM_gas_test_1_shield);
    s << indent << "EWM_gas_test_2_plasma: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EWM_gas_test_2_plasma);
    s << indent << "EWM_feed_wire: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EWM_feed_wire);
    s << indent << "EWM_unfeed_wire: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EWM_unfeed_wire);
    s << indent << "EWM_position_search: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EWM_position_search);
    s << indent << "EWM_error_reset: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EWM_error_reset);
    s << indent << "EWM_start_aux_process: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EWM_start_aux_process);
    s << indent << "EWM_user_relay: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EWM_user_relay);
    s << indent << "EWM_welding_simulation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EWM_welding_simulation);
    s << indent << "EWM_monitoring_function: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EWM_monitoring_function);
    s << indent << "EWM_filler_wire_activated: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EWM_filler_wire_activated);
    s << indent << "EWM_reserved_1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EWM_reserved_1);
    s << indent << "EWM_weld_mode_select_bit_0: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EWM_weld_mode_select_bit_0);
    s << indent << "EWM_weld_mode_select_bit_1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EWM_weld_mode_select_bit_1);
    s << indent << "EWM_wirefeeder_switch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EWM_wirefeeder_switch);
    s << indent << "EWM_reserved_2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EWM_reserved_2);
    s << indent << "EWM_cold_wire_feed_speed: ";
    Printer<float>::stream(s, indent + "  ", v.EWM_cold_wire_feed_speed);
    s << indent << "EWM_job_number: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EWM_job_number);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUKA_RSI_MSGS_MESSAGE_PLASMACOMMAND_H
