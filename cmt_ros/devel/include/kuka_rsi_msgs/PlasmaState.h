// Generated by gencpp from file kuka_rsi_msgs/PlasmaState.msg
// DO NOT EDIT!


#ifndef KUKA_RSI_MSGS_MESSAGE_PLASMASTATE_H
#define KUKA_RSI_MSGS_MESSAGE_PLASMASTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace kuka_rsi_msgs
{
template <class ContainerAllocator>
struct PlasmaState_
{
  typedef PlasmaState_<ContainerAllocator> Type;

  PlasmaState_()
    : header()
    , Dinse_wire_feed_speed(0.0)
    , EWM_voltage(0.0)
    , EWM_current(0.0)
    , EWM_wire_feed_speed(0.0)
    , Dinse_wire_feeder_ready(false)
    , Dinse_collective_fault(false)
    , Dinse_wire_feed_fault(false)
    , Dinse_power_failure(false)
    , Dinse_positioning_fault(false)
    , Dinse_hot_wire_fault(false)
    , Dinse_life_bit(false)
    , Dinse_current_on(false)
    , Dinse_service_interval(false)
    , Dinse_intern_fault(false)
    , Dinse_emergency_stop(false)
    , Dinse_gas_fault(false)
    , Dinse_water_fault(false)
    , Dinse_process_active(false)
    , Dinse_wire_end(false)
    , Dinse_wire_movement_on_stop(false)
    , EWM_current_flows(false)
    , EWM_ready_for_welding(false)
    , EWM_sticking(false)
    , EWM_error_1(false)
    , EWM_collision_signal(false)
    , EWM_program_sequence_on_main_current(false)
    , EWM_process_active(false)
    , EWM_current_flows_aux_process(false)
    , EWM_error_number(0)
    , EWM_network_phases_status(false)
    , EWM_user_defined_input_1(false)
    , EWM_no_external_stop_of_operation(false)
    , EWM_user_defined_input_2(false)
    , EWM_wire_available(false)
    , EWM_wirefeeder_ok(false)
    , EWM_gas_ok(false)
    , EWM_cooland_water_ok(false)  {
    }
  PlasmaState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , Dinse_wire_feed_speed(0.0)
    , EWM_voltage(0.0)
    , EWM_current(0.0)
    , EWM_wire_feed_speed(0.0)
    , Dinse_wire_feeder_ready(false)
    , Dinse_collective_fault(false)
    , Dinse_wire_feed_fault(false)
    , Dinse_power_failure(false)
    , Dinse_positioning_fault(false)
    , Dinse_hot_wire_fault(false)
    , Dinse_life_bit(false)
    , Dinse_current_on(false)
    , Dinse_service_interval(false)
    , Dinse_intern_fault(false)
    , Dinse_emergency_stop(false)
    , Dinse_gas_fault(false)
    , Dinse_water_fault(false)
    , Dinse_process_active(false)
    , Dinse_wire_end(false)
    , Dinse_wire_movement_on_stop(false)
    , EWM_current_flows(false)
    , EWM_ready_for_welding(false)
    , EWM_sticking(false)
    , EWM_error_1(false)
    , EWM_collision_signal(false)
    , EWM_program_sequence_on_main_current(false)
    , EWM_process_active(false)
    , EWM_current_flows_aux_process(false)
    , EWM_error_number(0)
    , EWM_network_phases_status(false)
    , EWM_user_defined_input_1(false)
    , EWM_no_external_stop_of_operation(false)
    , EWM_user_defined_input_2(false)
    , EWM_wire_available(false)
    , EWM_wirefeeder_ok(false)
    , EWM_gas_ok(false)
    , EWM_cooland_water_ok(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _Dinse_wire_feed_speed_type;
  _Dinse_wire_feed_speed_type Dinse_wire_feed_speed;

   typedef float _EWM_voltage_type;
  _EWM_voltage_type EWM_voltage;

   typedef float _EWM_current_type;
  _EWM_current_type EWM_current;

   typedef float _EWM_wire_feed_speed_type;
  _EWM_wire_feed_speed_type EWM_wire_feed_speed;

   typedef uint8_t _Dinse_wire_feeder_ready_type;
  _Dinse_wire_feeder_ready_type Dinse_wire_feeder_ready;

   typedef uint8_t _Dinse_collective_fault_type;
  _Dinse_collective_fault_type Dinse_collective_fault;

   typedef uint8_t _Dinse_wire_feed_fault_type;
  _Dinse_wire_feed_fault_type Dinse_wire_feed_fault;

   typedef uint8_t _Dinse_power_failure_type;
  _Dinse_power_failure_type Dinse_power_failure;

   typedef uint8_t _Dinse_positioning_fault_type;
  _Dinse_positioning_fault_type Dinse_positioning_fault;

   typedef uint8_t _Dinse_hot_wire_fault_type;
  _Dinse_hot_wire_fault_type Dinse_hot_wire_fault;

   typedef uint8_t _Dinse_life_bit_type;
  _Dinse_life_bit_type Dinse_life_bit;

   typedef uint8_t _Dinse_current_on_type;
  _Dinse_current_on_type Dinse_current_on;

   typedef uint8_t _Dinse_service_interval_type;
  _Dinse_service_interval_type Dinse_service_interval;

   typedef uint8_t _Dinse_intern_fault_type;
  _Dinse_intern_fault_type Dinse_intern_fault;

   typedef uint8_t _Dinse_emergency_stop_type;
  _Dinse_emergency_stop_type Dinse_emergency_stop;

   typedef uint8_t _Dinse_gas_fault_type;
  _Dinse_gas_fault_type Dinse_gas_fault;

   typedef uint8_t _Dinse_water_fault_type;
  _Dinse_water_fault_type Dinse_water_fault;

   typedef uint8_t _Dinse_process_active_type;
  _Dinse_process_active_type Dinse_process_active;

   typedef uint8_t _Dinse_wire_end_type;
  _Dinse_wire_end_type Dinse_wire_end;

   typedef uint8_t _Dinse_wire_movement_on_stop_type;
  _Dinse_wire_movement_on_stop_type Dinse_wire_movement_on_stop;

   typedef uint8_t _EWM_current_flows_type;
  _EWM_current_flows_type EWM_current_flows;

   typedef uint8_t _EWM_ready_for_welding_type;
  _EWM_ready_for_welding_type EWM_ready_for_welding;

   typedef uint8_t _EWM_sticking_type;
  _EWM_sticking_type EWM_sticking;

   typedef uint8_t _EWM_error_1_type;
  _EWM_error_1_type EWM_error_1;

   typedef uint8_t _EWM_collision_signal_type;
  _EWM_collision_signal_type EWM_collision_signal;

   typedef uint8_t _EWM_program_sequence_on_main_current_type;
  _EWM_program_sequence_on_main_current_type EWM_program_sequence_on_main_current;

   typedef uint8_t _EWM_process_active_type;
  _EWM_process_active_type EWM_process_active;

   typedef uint8_t _EWM_current_flows_aux_process_type;
  _EWM_current_flows_aux_process_type EWM_current_flows_aux_process;

   typedef uint8_t _EWM_error_number_type;
  _EWM_error_number_type EWM_error_number;

   typedef uint8_t _EWM_network_phases_status_type;
  _EWM_network_phases_status_type EWM_network_phases_status;

   typedef uint8_t _EWM_user_defined_input_1_type;
  _EWM_user_defined_input_1_type EWM_user_defined_input_1;

   typedef uint8_t _EWM_no_external_stop_of_operation_type;
  _EWM_no_external_stop_of_operation_type EWM_no_external_stop_of_operation;

   typedef uint8_t _EWM_user_defined_input_2_type;
  _EWM_user_defined_input_2_type EWM_user_defined_input_2;

   typedef uint8_t _EWM_wire_available_type;
  _EWM_wire_available_type EWM_wire_available;

   typedef uint8_t _EWM_wirefeeder_ok_type;
  _EWM_wirefeeder_ok_type EWM_wirefeeder_ok;

   typedef uint8_t _EWM_gas_ok_type;
  _EWM_gas_ok_type EWM_gas_ok;

   typedef uint8_t _EWM_cooland_water_ok_type;
  _EWM_cooland_water_ok_type EWM_cooland_water_ok;





  typedef boost::shared_ptr< ::kuka_rsi_msgs::PlasmaState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kuka_rsi_msgs::PlasmaState_<ContainerAllocator> const> ConstPtr;

}; // struct PlasmaState_

typedef ::kuka_rsi_msgs::PlasmaState_<std::allocator<void> > PlasmaState;

typedef boost::shared_ptr< ::kuka_rsi_msgs::PlasmaState > PlasmaStatePtr;
typedef boost::shared_ptr< ::kuka_rsi_msgs::PlasmaState const> PlasmaStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kuka_rsi_msgs::PlasmaState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kuka_rsi_msgs::PlasmaState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kuka_rsi_msgs::PlasmaState_<ContainerAllocator1> & lhs, const ::kuka_rsi_msgs::PlasmaState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.Dinse_wire_feed_speed == rhs.Dinse_wire_feed_speed &&
    lhs.EWM_voltage == rhs.EWM_voltage &&
    lhs.EWM_current == rhs.EWM_current &&
    lhs.EWM_wire_feed_speed == rhs.EWM_wire_feed_speed &&
    lhs.Dinse_wire_feeder_ready == rhs.Dinse_wire_feeder_ready &&
    lhs.Dinse_collective_fault == rhs.Dinse_collective_fault &&
    lhs.Dinse_wire_feed_fault == rhs.Dinse_wire_feed_fault &&
    lhs.Dinse_power_failure == rhs.Dinse_power_failure &&
    lhs.Dinse_positioning_fault == rhs.Dinse_positioning_fault &&
    lhs.Dinse_hot_wire_fault == rhs.Dinse_hot_wire_fault &&
    lhs.Dinse_life_bit == rhs.Dinse_life_bit &&
    lhs.Dinse_current_on == rhs.Dinse_current_on &&
    lhs.Dinse_service_interval == rhs.Dinse_service_interval &&
    lhs.Dinse_intern_fault == rhs.Dinse_intern_fault &&
    lhs.Dinse_emergency_stop == rhs.Dinse_emergency_stop &&
    lhs.Dinse_gas_fault == rhs.Dinse_gas_fault &&
    lhs.Dinse_water_fault == rhs.Dinse_water_fault &&
    lhs.Dinse_process_active == rhs.Dinse_process_active &&
    lhs.Dinse_wire_end == rhs.Dinse_wire_end &&
    lhs.Dinse_wire_movement_on_stop == rhs.Dinse_wire_movement_on_stop &&
    lhs.EWM_current_flows == rhs.EWM_current_flows &&
    lhs.EWM_ready_for_welding == rhs.EWM_ready_for_welding &&
    lhs.EWM_sticking == rhs.EWM_sticking &&
    lhs.EWM_error_1 == rhs.EWM_error_1 &&
    lhs.EWM_collision_signal == rhs.EWM_collision_signal &&
    lhs.EWM_program_sequence_on_main_current == rhs.EWM_program_sequence_on_main_current &&
    lhs.EWM_process_active == rhs.EWM_process_active &&
    lhs.EWM_current_flows_aux_process == rhs.EWM_current_flows_aux_process &&
    lhs.EWM_error_number == rhs.EWM_error_number &&
    lhs.EWM_network_phases_status == rhs.EWM_network_phases_status &&
    lhs.EWM_user_defined_input_1 == rhs.EWM_user_defined_input_1 &&
    lhs.EWM_no_external_stop_of_operation == rhs.EWM_no_external_stop_of_operation &&
    lhs.EWM_user_defined_input_2 == rhs.EWM_user_defined_input_2 &&
    lhs.EWM_wire_available == rhs.EWM_wire_available &&
    lhs.EWM_wirefeeder_ok == rhs.EWM_wirefeeder_ok &&
    lhs.EWM_gas_ok == rhs.EWM_gas_ok &&
    lhs.EWM_cooland_water_ok == rhs.EWM_cooland_water_ok;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kuka_rsi_msgs::PlasmaState_<ContainerAllocator1> & lhs, const ::kuka_rsi_msgs::PlasmaState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kuka_rsi_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kuka_rsi_msgs::PlasmaState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuka_rsi_msgs::PlasmaState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuka_rsi_msgs::PlasmaState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuka_rsi_msgs::PlasmaState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuka_rsi_msgs::PlasmaState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuka_rsi_msgs::PlasmaState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kuka_rsi_msgs::PlasmaState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "69caddae70f327bd935d395e65e0ca27";
  }

  static const char* value(const ::kuka_rsi_msgs::PlasmaState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x69caddae70f327bdULL;
  static const uint64_t static_value2 = 0x935d395e65e0ca27ULL;
};

template<class ContainerAllocator>
struct DataType< ::kuka_rsi_msgs::PlasmaState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kuka_rsi_msgs/PlasmaState";
  }

  static const char* value(const ::kuka_rsi_msgs::PlasmaState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kuka_rsi_msgs::PlasmaState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"# Field 3-4\n"
"float32 Dinse_wire_feed_speed\n"
"# Field 8-9\n"
"float32 EWM_voltage\n"
"# Field 10-11\n"
"float32 EWM_current\n"
"# Field 12-13\n"
"float32 EWM_wire_feed_speed\n"
"# Field 1\n"
"bool Dinse_wire_feeder_ready\n"
"bool Dinse_collective_fault\n"
"bool Dinse_wire_feed_fault\n"
"bool Dinse_power_failure\n"
"bool Dinse_positioning_fault\n"
"bool Dinse_hot_wire_fault\n"
"bool Dinse_life_bit\n"
"bool Dinse_current_on\n"
"# Field 2\n"
"bool Dinse_service_interval\n"
"bool Dinse_intern_fault\n"
"bool Dinse_emergency_stop\n"
"bool Dinse_gas_fault\n"
"bool Dinse_water_fault\n"
"bool Dinse_process_active\n"
"bool Dinse_wire_end\n"
"bool Dinse_wire_movement_on_stop\n"
"# Field 5\n"
"bool EWM_current_flows\n"
"bool EWM_ready_for_welding\n"
"bool EWM_sticking\n"
"bool EWM_error_1\n"
"bool EWM_collision_signal\n"
"bool EWM_program_sequence_on_main_current\n"
"bool EWM_process_active\n"
"bool EWM_current_flows_aux_process\n"
"# Field 6\n"
"uint8 EWM_error_number\n"
"# Field 7\n"
"bool EWM_network_phases_status\n"
"bool EWM_user_defined_input_1\n"
"bool EWM_no_external_stop_of_operation\n"
"bool EWM_user_defined_input_2\n"
"bool EWM_wire_available\n"
"bool EWM_wirefeeder_ok\n"
"bool EWM_gas_ok\n"
"bool EWM_cooland_water_ok\n"
"#\n"
"# Commented fields are not used in WAAM Interface (welding_display.cpp)\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::kuka_rsi_msgs::PlasmaState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kuka_rsi_msgs::PlasmaState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.Dinse_wire_feed_speed);
      stream.next(m.EWM_voltage);
      stream.next(m.EWM_current);
      stream.next(m.EWM_wire_feed_speed);
      stream.next(m.Dinse_wire_feeder_ready);
      stream.next(m.Dinse_collective_fault);
      stream.next(m.Dinse_wire_feed_fault);
      stream.next(m.Dinse_power_failure);
      stream.next(m.Dinse_positioning_fault);
      stream.next(m.Dinse_hot_wire_fault);
      stream.next(m.Dinse_life_bit);
      stream.next(m.Dinse_current_on);
      stream.next(m.Dinse_service_interval);
      stream.next(m.Dinse_intern_fault);
      stream.next(m.Dinse_emergency_stop);
      stream.next(m.Dinse_gas_fault);
      stream.next(m.Dinse_water_fault);
      stream.next(m.Dinse_process_active);
      stream.next(m.Dinse_wire_end);
      stream.next(m.Dinse_wire_movement_on_stop);
      stream.next(m.EWM_current_flows);
      stream.next(m.EWM_ready_for_welding);
      stream.next(m.EWM_sticking);
      stream.next(m.EWM_error_1);
      stream.next(m.EWM_collision_signal);
      stream.next(m.EWM_program_sequence_on_main_current);
      stream.next(m.EWM_process_active);
      stream.next(m.EWM_current_flows_aux_process);
      stream.next(m.EWM_error_number);
      stream.next(m.EWM_network_phases_status);
      stream.next(m.EWM_user_defined_input_1);
      stream.next(m.EWM_no_external_stop_of_operation);
      stream.next(m.EWM_user_defined_input_2);
      stream.next(m.EWM_wire_available);
      stream.next(m.EWM_wirefeeder_ok);
      stream.next(m.EWM_gas_ok);
      stream.next(m.EWM_cooland_water_ok);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlasmaState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kuka_rsi_msgs::PlasmaState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kuka_rsi_msgs::PlasmaState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "Dinse_wire_feed_speed: ";
    Printer<float>::stream(s, indent + "  ", v.Dinse_wire_feed_speed);
    s << indent << "EWM_voltage: ";
    Printer<float>::stream(s, indent + "  ", v.EWM_voltage);
    s << indent << "EWM_current: ";
    Printer<float>::stream(s, indent + "  ", v.EWM_current);
    s << indent << "EWM_wire_feed_speed: ";
    Printer<float>::stream(s, indent + "  ", v.EWM_wire_feed_speed);
    s << indent << "Dinse_wire_feeder_ready: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Dinse_wire_feeder_ready);
    s << indent << "Dinse_collective_fault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Dinse_collective_fault);
    s << indent << "Dinse_wire_feed_fault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Dinse_wire_feed_fault);
    s << indent << "Dinse_power_failure: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Dinse_power_failure);
    s << indent << "Dinse_positioning_fault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Dinse_positioning_fault);
    s << indent << "Dinse_hot_wire_fault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Dinse_hot_wire_fault);
    s << indent << "Dinse_life_bit: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Dinse_life_bit);
    s << indent << "Dinse_current_on: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Dinse_current_on);
    s << indent << "Dinse_service_interval: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Dinse_service_interval);
    s << indent << "Dinse_intern_fault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Dinse_intern_fault);
    s << indent << "Dinse_emergency_stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Dinse_emergency_stop);
    s << indent << "Dinse_gas_fault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Dinse_gas_fault);
    s << indent << "Dinse_water_fault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Dinse_water_fault);
    s << indent << "Dinse_process_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Dinse_process_active);
    s << indent << "Dinse_wire_end: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Dinse_wire_end);
    s << indent << "Dinse_wire_movement_on_stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Dinse_wire_movement_on_stop);
    s << indent << "EWM_current_flows: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EWM_current_flows);
    s << indent << "EWM_ready_for_welding: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EWM_ready_for_welding);
    s << indent << "EWM_sticking: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EWM_sticking);
    s << indent << "EWM_error_1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EWM_error_1);
    s << indent << "EWM_collision_signal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EWM_collision_signal);
    s << indent << "EWM_program_sequence_on_main_current: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EWM_program_sequence_on_main_current);
    s << indent << "EWM_process_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EWM_process_active);
    s << indent << "EWM_current_flows_aux_process: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EWM_current_flows_aux_process);
    s << indent << "EWM_error_number: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EWM_error_number);
    s << indent << "EWM_network_phases_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EWM_network_phases_status);
    s << indent << "EWM_user_defined_input_1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EWM_user_defined_input_1);
    s << indent << "EWM_no_external_stop_of_operation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EWM_no_external_stop_of_operation);
    s << indent << "EWM_user_defined_input_2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EWM_user_defined_input_2);
    s << indent << "EWM_wire_available: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EWM_wire_available);
    s << indent << "EWM_wirefeeder_ok: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EWM_wirefeeder_ok);
    s << indent << "EWM_gas_ok: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EWM_gas_ok);
    s << indent << "EWM_cooland_water_ok: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EWM_cooland_water_ok);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUKA_RSI_MSGS_MESSAGE_PLASMASTATE_H
