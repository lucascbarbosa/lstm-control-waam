// Generated by gencpp from file kuka_rsi_msgs/FroniusCommand.msg
// DO NOT EDIT!


#ifndef KUKA_RSI_MSGS_MESSAGE_FRONIUSCOMMAND_H
#define KUKA_RSI_MSGS_MESSAGE_FRONIUSCOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace kuka_rsi_msgs
{
template <class ContainerAllocator>
struct FroniusCommand_
{
  typedef FroniusCommand_<ContainerAllocator> Type;

  FroniusCommand_()
    : header()
    , power_set_value(0.0)
    , arc_length_correction(0.0)
    , dynamic_correction(0.0)
    , burn_back(0.0)
    , welding_start(false)
    , working_modes(0)
    , master_selection_twin(false)
    , gas_test(false)
    , wire_forward(false)
    , job_number(0)
    , program_number(0)
    , welding_simulation(false)
    , synchro_pulse_disable(false)
    , SFI_disable(false)
    , dynamic_correction_disable(false)
    , burn_back_disable(false)
    , full_power_range(false)  {
    }
  FroniusCommand_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , power_set_value(0.0)
    , arc_length_correction(0.0)
    , dynamic_correction(0.0)
    , burn_back(0.0)
    , welding_start(false)
    , working_modes(0)
    , master_selection_twin(false)
    , gas_test(false)
    , wire_forward(false)
    , job_number(0)
    , program_number(0)
    , welding_simulation(false)
    , synchro_pulse_disable(false)
    , SFI_disable(false)
    , dynamic_correction_disable(false)
    , burn_back_disable(false)
    , full_power_range(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _power_set_value_type;
  _power_set_value_type power_set_value;

   typedef float _arc_length_correction_type;
  _arc_length_correction_type arc_length_correction;

   typedef float _dynamic_correction_type;
  _dynamic_correction_type dynamic_correction;

   typedef float _burn_back_type;
  _burn_back_type burn_back;

   typedef uint8_t _welding_start_type;
  _welding_start_type welding_start;

   typedef uint8_t _working_modes_type;
  _working_modes_type working_modes;

   typedef uint8_t _master_selection_twin_type;
  _master_selection_twin_type master_selection_twin;

   typedef uint8_t _gas_test_type;
  _gas_test_type gas_test;

   typedef uint8_t _wire_forward_type;
  _wire_forward_type wire_forward;

   typedef uint8_t _job_number_type;
  _job_number_type job_number;

   typedef uint8_t _program_number_type;
  _program_number_type program_number;

   typedef uint8_t _welding_simulation_type;
  _welding_simulation_type welding_simulation;

   typedef uint8_t _synchro_pulse_disable_type;
  _synchro_pulse_disable_type synchro_pulse_disable;

   typedef uint8_t _SFI_disable_type;
  _SFI_disable_type SFI_disable;

   typedef uint8_t _dynamic_correction_disable_type;
  _dynamic_correction_disable_type dynamic_correction_disable;

   typedef uint8_t _burn_back_disable_type;
  _burn_back_disable_type burn_back_disable;

   typedef uint8_t _full_power_range_type;
  _full_power_range_type full_power_range;





  typedef boost::shared_ptr< ::kuka_rsi_msgs::FroniusCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kuka_rsi_msgs::FroniusCommand_<ContainerAllocator> const> ConstPtr;

}; // struct FroniusCommand_

typedef ::kuka_rsi_msgs::FroniusCommand_<std::allocator<void> > FroniusCommand;

typedef boost::shared_ptr< ::kuka_rsi_msgs::FroniusCommand > FroniusCommandPtr;
typedef boost::shared_ptr< ::kuka_rsi_msgs::FroniusCommand const> FroniusCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kuka_rsi_msgs::FroniusCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kuka_rsi_msgs::FroniusCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kuka_rsi_msgs::FroniusCommand_<ContainerAllocator1> & lhs, const ::kuka_rsi_msgs::FroniusCommand_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.power_set_value == rhs.power_set_value &&
    lhs.arc_length_correction == rhs.arc_length_correction &&
    lhs.dynamic_correction == rhs.dynamic_correction &&
    lhs.burn_back == rhs.burn_back &&
    lhs.welding_start == rhs.welding_start &&
    lhs.working_modes == rhs.working_modes &&
    lhs.master_selection_twin == rhs.master_selection_twin &&
    lhs.gas_test == rhs.gas_test &&
    lhs.wire_forward == rhs.wire_forward &&
    lhs.job_number == rhs.job_number &&
    lhs.program_number == rhs.program_number &&
    lhs.welding_simulation == rhs.welding_simulation &&
    lhs.synchro_pulse_disable == rhs.synchro_pulse_disable &&
    lhs.SFI_disable == rhs.SFI_disable &&
    lhs.dynamic_correction_disable == rhs.dynamic_correction_disable &&
    lhs.burn_back_disable == rhs.burn_back_disable &&
    lhs.full_power_range == rhs.full_power_range;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kuka_rsi_msgs::FroniusCommand_<ContainerAllocator1> & lhs, const ::kuka_rsi_msgs::FroniusCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kuka_rsi_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kuka_rsi_msgs::FroniusCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuka_rsi_msgs::FroniusCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuka_rsi_msgs::FroniusCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuka_rsi_msgs::FroniusCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuka_rsi_msgs::FroniusCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuka_rsi_msgs::FroniusCommand_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kuka_rsi_msgs::FroniusCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3db99eb4c29a0d366f39cbc70352a89a";
  }

  static const char* value(const ::kuka_rsi_msgs::FroniusCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3db99eb4c29a0d36ULL;
  static const uint64_t static_value2 = 0x6f39cbc70352a89aULL;
};

template<class ContainerAllocator>
struct DataType< ::kuka_rsi_msgs::FroniusCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kuka_rsi_msgs/FroniusCommand";
  }

  static const char* value(const ::kuka_rsi_msgs::FroniusCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kuka_rsi_msgs::FroniusCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"# Field 5-6\n"
"float32 power_set_value\n"
"# Field 7-8\n"
"float32 arc_length_correction\n"
"# Field 9\n"
"float32 dynamic_correction\n"
"# Field 10\n"
"float32 burn_back\n"
"# Field 1\n"
"bool welding_start\n"
"# Field 2\n"
"uint8 working_modes\n"
"# bool working_modes_bit0\n"
"# bool working_modes_bit1\n"
"# bool working_modes_bit2\n"
"bool master_selection_twin\n"
"bool gas_test\n"
"bool wire_forward\n"
"# Field 3\n"
"uint8 job_number\n"
"# Field 4\n"
"uint8 program_number\n"
"bool welding_simulation\n"
"# Field 11\n"
"bool synchro_pulse_disable\n"
"bool SFI_disable\n"
"bool dynamic_correction_disable\n"
"bool burn_back_disable\n"
"bool full_power_range\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::kuka_rsi_msgs::FroniusCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kuka_rsi_msgs::FroniusCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.power_set_value);
      stream.next(m.arc_length_correction);
      stream.next(m.dynamic_correction);
      stream.next(m.burn_back);
      stream.next(m.welding_start);
      stream.next(m.working_modes);
      stream.next(m.master_selection_twin);
      stream.next(m.gas_test);
      stream.next(m.wire_forward);
      stream.next(m.job_number);
      stream.next(m.program_number);
      stream.next(m.welding_simulation);
      stream.next(m.synchro_pulse_disable);
      stream.next(m.SFI_disable);
      stream.next(m.dynamic_correction_disable);
      stream.next(m.burn_back_disable);
      stream.next(m.full_power_range);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FroniusCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kuka_rsi_msgs::FroniusCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kuka_rsi_msgs::FroniusCommand_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "power_set_value: ";
    Printer<float>::stream(s, indent + "  ", v.power_set_value);
    s << indent << "arc_length_correction: ";
    Printer<float>::stream(s, indent + "  ", v.arc_length_correction);
    s << indent << "dynamic_correction: ";
    Printer<float>::stream(s, indent + "  ", v.dynamic_correction);
    s << indent << "burn_back: ";
    Printer<float>::stream(s, indent + "  ", v.burn_back);
    s << indent << "welding_start: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.welding_start);
    s << indent << "working_modes: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.working_modes);
    s << indent << "master_selection_twin: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.master_selection_twin);
    s << indent << "gas_test: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gas_test);
    s << indent << "wire_forward: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wire_forward);
    s << indent << "job_number: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.job_number);
    s << indent << "program_number: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.program_number);
    s << indent << "welding_simulation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.welding_simulation);
    s << indent << "synchro_pulse_disable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.synchro_pulse_disable);
    s << indent << "SFI_disable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SFI_disable);
    s << indent << "dynamic_correction_disable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dynamic_correction_disable);
    s << indent << "burn_back_disable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.burn_back_disable);
    s << indent << "full_power_range: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.full_power_range);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUKA_RSI_MSGS_MESSAGE_FRONIUSCOMMAND_H
