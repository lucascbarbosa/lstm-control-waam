// Generated by gencpp from file kuka_rsi_msgs/Fronius500iCommand.msg
// DO NOT EDIT!


#ifndef KUKA_RSI_MSGS_MESSAGE_FRONIUS500ICOMMAND_H
#define KUKA_RSI_MSGS_MESSAGE_FRONIUS500ICOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace kuka_rsi_msgs
{
template <class ContainerAllocator>
struct Fronius500iCommand_
{
  typedef Fronius500iCommand_<ContainerAllocator> Type;

  Fronius500iCommand_()
    : header()
    , wire_feed_speed_command_value(0.0)
    , arc_length_correction(0.0)
    , dynamic_correction(0.0)
    , wire_retract_correction(0.0)
    , welding_start(false)
    , working_modes(0)
    , gas_test(false)
    , wire_forward(false)
    , wire_backward(false)
    , error_quit(false)
    , touch_sensing(false)
    , torch_blow_out(false)
    , process_line_selection(0)
    , welding_simulation(false)
    , synchro_pulse_on(false)  {
    }
  Fronius500iCommand_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , wire_feed_speed_command_value(0.0)
    , arc_length_correction(0.0)
    , dynamic_correction(0.0)
    , wire_retract_correction(0.0)
    , welding_start(false)
    , working_modes(0)
    , gas_test(false)
    , wire_forward(false)
    , wire_backward(false)
    , error_quit(false)
    , touch_sensing(false)
    , torch_blow_out(false)
    , process_line_selection(0)
    , welding_simulation(false)
    , synchro_pulse_on(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _wire_feed_speed_command_value_type;
  _wire_feed_speed_command_value_type wire_feed_speed_command_value;

   typedef float _arc_length_correction_type;
  _arc_length_correction_type arc_length_correction;

   typedef float _dynamic_correction_type;
  _dynamic_correction_type dynamic_correction;

   typedef float _wire_retract_correction_type;
  _wire_retract_correction_type wire_retract_correction;

   typedef uint8_t _welding_start_type;
  _welding_start_type welding_start;

   typedef uint8_t _working_modes_type;
  _working_modes_type working_modes;

   typedef uint8_t _gas_test_type;
  _gas_test_type gas_test;

   typedef uint8_t _wire_forward_type;
  _wire_forward_type wire_forward;

   typedef uint8_t _wire_backward_type;
  _wire_backward_type wire_backward;

   typedef uint8_t _error_quit_type;
  _error_quit_type error_quit;

   typedef uint8_t _touch_sensing_type;
  _touch_sensing_type touch_sensing;

   typedef uint8_t _torch_blow_out_type;
  _torch_blow_out_type torch_blow_out;

   typedef uint8_t _process_line_selection_type;
  _process_line_selection_type process_line_selection;

   typedef uint8_t _welding_simulation_type;
  _welding_simulation_type welding_simulation;

   typedef uint8_t _synchro_pulse_on_type;
  _synchro_pulse_on_type synchro_pulse_on;





  typedef boost::shared_ptr< ::kuka_rsi_msgs::Fronius500iCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kuka_rsi_msgs::Fronius500iCommand_<ContainerAllocator> const> ConstPtr;

}; // struct Fronius500iCommand_

typedef ::kuka_rsi_msgs::Fronius500iCommand_<std::allocator<void> > Fronius500iCommand;

typedef boost::shared_ptr< ::kuka_rsi_msgs::Fronius500iCommand > Fronius500iCommandPtr;
typedef boost::shared_ptr< ::kuka_rsi_msgs::Fronius500iCommand const> Fronius500iCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kuka_rsi_msgs::Fronius500iCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kuka_rsi_msgs::Fronius500iCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kuka_rsi_msgs::Fronius500iCommand_<ContainerAllocator1> & lhs, const ::kuka_rsi_msgs::Fronius500iCommand_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.wire_feed_speed_command_value == rhs.wire_feed_speed_command_value &&
    lhs.arc_length_correction == rhs.arc_length_correction &&
    lhs.dynamic_correction == rhs.dynamic_correction &&
    lhs.wire_retract_correction == rhs.wire_retract_correction &&
    lhs.welding_start == rhs.welding_start &&
    lhs.working_modes == rhs.working_modes &&
    lhs.gas_test == rhs.gas_test &&
    lhs.wire_forward == rhs.wire_forward &&
    lhs.wire_backward == rhs.wire_backward &&
    lhs.error_quit == rhs.error_quit &&
    lhs.touch_sensing == rhs.touch_sensing &&
    lhs.torch_blow_out == rhs.torch_blow_out &&
    lhs.process_line_selection == rhs.process_line_selection &&
    lhs.welding_simulation == rhs.welding_simulation &&
    lhs.synchro_pulse_on == rhs.synchro_pulse_on;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kuka_rsi_msgs::Fronius500iCommand_<ContainerAllocator1> & lhs, const ::kuka_rsi_msgs::Fronius500iCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kuka_rsi_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kuka_rsi_msgs::Fronius500iCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuka_rsi_msgs::Fronius500iCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuka_rsi_msgs::Fronius500iCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuka_rsi_msgs::Fronius500iCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuka_rsi_msgs::Fronius500iCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuka_rsi_msgs::Fronius500iCommand_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kuka_rsi_msgs::Fronius500iCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a80028ec811c3f4ac2757241bd4475c6";
  }

  static const char* value(const ::kuka_rsi_msgs::Fronius500iCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa80028ec811c3f4aULL;
  static const uint64_t static_value2 = 0xc2757241bd4475c6ULL;
};

template<class ContainerAllocator>
struct DataType< ::kuka_rsi_msgs::Fronius500iCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kuka_rsi_msgs/Fronius500iCommand";
  }

  static const char* value(const ::kuka_rsi_msgs::Fronius500iCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kuka_rsi_msgs::Fronius500iCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"# Field[3]\n"
"float32 wire_feed_speed_command_value\n"
"# Field[4]\n"
"float32 arc_length_correction\n"
"# Field[5]\n"
"float32 dynamic_correction\n"
"# Field[6]\n"
"float32 wire_retract_correction\n"
"# Field[0]\n"
"bool welding_start\n"
"# Field[1]\n"
"uint8 working_modes # [0-4]\n"
"bool gas_test # [6]\n"
"bool wire_forward # [7]\n"
"# Field[2]\n"
"bool wire_backward\n"
"bool error_quit\n"
"bool touch_sensing\n"
"bool torch_blow_out\n"
"uint8 process_line_selection\n"
"bool welding_simulation\n"
"bool synchro_pulse_on\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::kuka_rsi_msgs::Fronius500iCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kuka_rsi_msgs::Fronius500iCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.wire_feed_speed_command_value);
      stream.next(m.arc_length_correction);
      stream.next(m.dynamic_correction);
      stream.next(m.wire_retract_correction);
      stream.next(m.welding_start);
      stream.next(m.working_modes);
      stream.next(m.gas_test);
      stream.next(m.wire_forward);
      stream.next(m.wire_backward);
      stream.next(m.error_quit);
      stream.next(m.touch_sensing);
      stream.next(m.torch_blow_out);
      stream.next(m.process_line_selection);
      stream.next(m.welding_simulation);
      stream.next(m.synchro_pulse_on);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Fronius500iCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kuka_rsi_msgs::Fronius500iCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kuka_rsi_msgs::Fronius500iCommand_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "wire_feed_speed_command_value: ";
    Printer<float>::stream(s, indent + "  ", v.wire_feed_speed_command_value);
    s << indent << "arc_length_correction: ";
    Printer<float>::stream(s, indent + "  ", v.arc_length_correction);
    s << indent << "dynamic_correction: ";
    Printer<float>::stream(s, indent + "  ", v.dynamic_correction);
    s << indent << "wire_retract_correction: ";
    Printer<float>::stream(s, indent + "  ", v.wire_retract_correction);
    s << indent << "welding_start: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.welding_start);
    s << indent << "working_modes: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.working_modes);
    s << indent << "gas_test: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gas_test);
    s << indent << "wire_forward: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wire_forward);
    s << indent << "wire_backward: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wire_backward);
    s << indent << "error_quit: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.error_quit);
    s << indent << "touch_sensing: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.touch_sensing);
    s << indent << "torch_blow_out: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.torch_blow_out);
    s << indent << "process_line_selection: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.process_line_selection);
    s << indent << "welding_simulation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.welding_simulation);
    s << indent << "synchro_pulse_on: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.synchro_pulse_on);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUKA_RSI_MSGS_MESSAGE_FRONIUS500ICOMMAND_H
