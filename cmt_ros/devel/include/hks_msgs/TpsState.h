// Generated by gencpp from file hks_msgs/TpsState.msg
// DO NOT EDIT!


#ifndef HKS_MSGS_MESSAGE_TPSSTATE_H
#define HKS_MSGS_MESSAGE_TPSSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace hks_msgs
{
template <class ContainerAllocator>
struct TpsState_
{
  typedef TpsState_<ContainerAllocator> Type;

  TpsState_()
    : header()
    , IRdif(0.0)
    , IRpos(0.0)
    , IRmaxTemp(0.0)
    , IRwidth(0.0)
    , IRirreg(0.0)
    , IRsymet(0.0)  {
    }
  TpsState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , IRdif(0.0)
    , IRpos(0.0)
    , IRmaxTemp(0.0)
    , IRwidth(0.0)
    , IRirreg(0.0)
    , IRsymet(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _IRdif_type;
  _IRdif_type IRdif;

   typedef double _IRpos_type;
  _IRpos_type IRpos;

   typedef double _IRmaxTemp_type;
  _IRmaxTemp_type IRmaxTemp;

   typedef double _IRwidth_type;
  _IRwidth_type IRwidth;

   typedef double _IRirreg_type;
  _IRirreg_type IRirreg;

   typedef double _IRsymet_type;
  _IRsymet_type IRsymet;





  typedef boost::shared_ptr< ::hks_msgs::TpsState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hks_msgs::TpsState_<ContainerAllocator> const> ConstPtr;

}; // struct TpsState_

typedef ::hks_msgs::TpsState_<std::allocator<void> > TpsState;

typedef boost::shared_ptr< ::hks_msgs::TpsState > TpsStatePtr;
typedef boost::shared_ptr< ::hks_msgs::TpsState const> TpsStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hks_msgs::TpsState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hks_msgs::TpsState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hks_msgs::TpsState_<ContainerAllocator1> & lhs, const ::hks_msgs::TpsState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.IRdif == rhs.IRdif &&
    lhs.IRpos == rhs.IRpos &&
    lhs.IRmaxTemp == rhs.IRmaxTemp &&
    lhs.IRwidth == rhs.IRwidth &&
    lhs.IRirreg == rhs.IRirreg &&
    lhs.IRsymet == rhs.IRsymet;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hks_msgs::TpsState_<ContainerAllocator1> & lhs, const ::hks_msgs::TpsState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hks_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hks_msgs::TpsState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hks_msgs::TpsState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hks_msgs::TpsState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hks_msgs::TpsState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hks_msgs::TpsState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hks_msgs::TpsState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hks_msgs::TpsState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1d051352653a4f46732676ac4e695c1f";
  }

  static const char* value(const ::hks_msgs::TpsState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1d051352653a4f46ULL;
  static const uint64_t static_value2 = 0x732676ac4e695c1fULL;
};

template<class ContainerAllocator>
struct DataType< ::hks_msgs::TpsState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hks_msgs/TpsState";
  }

  static const char* value(const ::hks_msgs::TpsState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hks_msgs::TpsState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"#\n"
"float64 IRdif\n"
"float64 IRpos\n"
"float64 IRmaxTemp\n"
"float64 IRwidth\n"
"float64 IRirreg\n"
"float64 IRsymet\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::hks_msgs::TpsState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hks_msgs::TpsState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.IRdif);
      stream.next(m.IRpos);
      stream.next(m.IRmaxTemp);
      stream.next(m.IRwidth);
      stream.next(m.IRirreg);
      stream.next(m.IRsymet);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TpsState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hks_msgs::TpsState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hks_msgs::TpsState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "IRdif: ";
    Printer<double>::stream(s, indent + "  ", v.IRdif);
    s << indent << "IRpos: ";
    Printer<double>::stream(s, indent + "  ", v.IRpos);
    s << indent << "IRmaxTemp: ";
    Printer<double>::stream(s, indent + "  ", v.IRmaxTemp);
    s << indent << "IRwidth: ";
    Printer<double>::stream(s, indent + "  ", v.IRwidth);
    s << indent << "IRirreg: ";
    Printer<double>::stream(s, indent + "  ", v.IRirreg);
    s << indent << "IRsymet: ";
    Printer<double>::stream(s, indent + "  ", v.IRsymet);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HKS_MSGS_MESSAGE_TPSSTATE_H
