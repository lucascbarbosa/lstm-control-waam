# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kuka_rsi_msgs/Fronius500iCommand.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class Fronius500iCommand(genpy.Message):
  _md5sum = "a80028ec811c3f4ac2757241bd4475c6"
  _type = "kuka_rsi_msgs/Fronius500iCommand"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
# Field[3]
float32 wire_feed_speed_command_value
# Field[4]
float32 arc_length_correction
# Field[5]
float32 dynamic_correction
# Field[6]
float32 wire_retract_correction
# Field[0]
bool welding_start
# Field[1]
uint8 working_modes # [0-4]
bool gas_test # [6]
bool wire_forward # [7]
# Field[2]
bool wire_backward
bool error_quit
bool touch_sensing
bool torch_blow_out
uint8 process_line_selection
bool welding_simulation
bool synchro_pulse_on

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','wire_feed_speed_command_value','arc_length_correction','dynamic_correction','wire_retract_correction','welding_start','working_modes','gas_test','wire_forward','wire_backward','error_quit','touch_sensing','torch_blow_out','process_line_selection','welding_simulation','synchro_pulse_on']
  _slot_types = ['std_msgs/Header','float32','float32','float32','float32','bool','uint8','bool','bool','bool','bool','bool','bool','uint8','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,wire_feed_speed_command_value,arc_length_correction,dynamic_correction,wire_retract_correction,welding_start,working_modes,gas_test,wire_forward,wire_backward,error_quit,touch_sensing,torch_blow_out,process_line_selection,welding_simulation,synchro_pulse_on

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Fronius500iCommand, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.wire_feed_speed_command_value is None:
        self.wire_feed_speed_command_value = 0.
      if self.arc_length_correction is None:
        self.arc_length_correction = 0.
      if self.dynamic_correction is None:
        self.dynamic_correction = 0.
      if self.wire_retract_correction is None:
        self.wire_retract_correction = 0.
      if self.welding_start is None:
        self.welding_start = False
      if self.working_modes is None:
        self.working_modes = 0
      if self.gas_test is None:
        self.gas_test = False
      if self.wire_forward is None:
        self.wire_forward = False
      if self.wire_backward is None:
        self.wire_backward = False
      if self.error_quit is None:
        self.error_quit = False
      if self.touch_sensing is None:
        self.touch_sensing = False
      if self.torch_blow_out is None:
        self.torch_blow_out = False
      if self.process_line_selection is None:
        self.process_line_selection = 0
      if self.welding_simulation is None:
        self.welding_simulation = False
      if self.synchro_pulse_on is None:
        self.synchro_pulse_on = False
    else:
      self.header = std_msgs.msg.Header()
      self.wire_feed_speed_command_value = 0.
      self.arc_length_correction = 0.
      self.dynamic_correction = 0.
      self.wire_retract_correction = 0.
      self.welding_start = False
      self.working_modes = 0
      self.gas_test = False
      self.wire_forward = False
      self.wire_backward = False
      self.error_quit = False
      self.touch_sensing = False
      self.torch_blow_out = False
      self.process_line_selection = 0
      self.welding_simulation = False
      self.synchro_pulse_on = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4f11B().pack(_x.wire_feed_speed_command_value, _x.arc_length_correction, _x.dynamic_correction, _x.wire_retract_correction, _x.welding_start, _x.working_modes, _x.gas_test, _x.wire_forward, _x.wire_backward, _x.error_quit, _x.touch_sensing, _x.torch_blow_out, _x.process_line_selection, _x.welding_simulation, _x.synchro_pulse_on))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 27
      (_x.wire_feed_speed_command_value, _x.arc_length_correction, _x.dynamic_correction, _x.wire_retract_correction, _x.welding_start, _x.working_modes, _x.gas_test, _x.wire_forward, _x.wire_backward, _x.error_quit, _x.touch_sensing, _x.torch_blow_out, _x.process_line_selection, _x.welding_simulation, _x.synchro_pulse_on,) = _get_struct_4f11B().unpack(str[start:end])
      self.welding_start = bool(self.welding_start)
      self.gas_test = bool(self.gas_test)
      self.wire_forward = bool(self.wire_forward)
      self.wire_backward = bool(self.wire_backward)
      self.error_quit = bool(self.error_quit)
      self.touch_sensing = bool(self.touch_sensing)
      self.torch_blow_out = bool(self.torch_blow_out)
      self.welding_simulation = bool(self.welding_simulation)
      self.synchro_pulse_on = bool(self.synchro_pulse_on)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4f11B().pack(_x.wire_feed_speed_command_value, _x.arc_length_correction, _x.dynamic_correction, _x.wire_retract_correction, _x.welding_start, _x.working_modes, _x.gas_test, _x.wire_forward, _x.wire_backward, _x.error_quit, _x.touch_sensing, _x.torch_blow_out, _x.process_line_selection, _x.welding_simulation, _x.synchro_pulse_on))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 27
      (_x.wire_feed_speed_command_value, _x.arc_length_correction, _x.dynamic_correction, _x.wire_retract_correction, _x.welding_start, _x.working_modes, _x.gas_test, _x.wire_forward, _x.wire_backward, _x.error_quit, _x.touch_sensing, _x.torch_blow_out, _x.process_line_selection, _x.welding_simulation, _x.synchro_pulse_on,) = _get_struct_4f11B().unpack(str[start:end])
      self.welding_start = bool(self.welding_start)
      self.gas_test = bool(self.gas_test)
      self.wire_forward = bool(self.wire_forward)
      self.wire_backward = bool(self.wire_backward)
      self.error_quit = bool(self.error_quit)
      self.touch_sensing = bool(self.touch_sensing)
      self.torch_blow_out = bool(self.torch_blow_out)
      self.welding_simulation = bool(self.welding_simulation)
      self.synchro_pulse_on = bool(self.synchro_pulse_on)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4f11B = None
def _get_struct_4f11B():
    global _struct_4f11B
    if _struct_4f11B is None:
        _struct_4f11B = struct.Struct("<4f11B")
    return _struct_4f11B
