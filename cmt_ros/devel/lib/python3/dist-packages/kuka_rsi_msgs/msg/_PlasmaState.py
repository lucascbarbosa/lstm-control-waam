# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kuka_rsi_msgs/PlasmaState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class PlasmaState(genpy.Message):
  _md5sum = "69caddae70f327bd935d395e65e0ca27"
  _type = "kuka_rsi_msgs/PlasmaState"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
# Field 3-4
float32 Dinse_wire_feed_speed
# Field 8-9
float32 EWM_voltage
# Field 10-11
float32 EWM_current
# Field 12-13
float32 EWM_wire_feed_speed
# Field 1
bool Dinse_wire_feeder_ready
bool Dinse_collective_fault
bool Dinse_wire_feed_fault
bool Dinse_power_failure
bool Dinse_positioning_fault
bool Dinse_hot_wire_fault
bool Dinse_life_bit
bool Dinse_current_on
# Field 2
bool Dinse_service_interval
bool Dinse_intern_fault
bool Dinse_emergency_stop
bool Dinse_gas_fault
bool Dinse_water_fault
bool Dinse_process_active
bool Dinse_wire_end
bool Dinse_wire_movement_on_stop
# Field 5
bool EWM_current_flows
bool EWM_ready_for_welding
bool EWM_sticking
bool EWM_error_1
bool EWM_collision_signal
bool EWM_program_sequence_on_main_current
bool EWM_process_active
bool EWM_current_flows_aux_process
# Field 6
uint8 EWM_error_number
# Field 7
bool EWM_network_phases_status
bool EWM_user_defined_input_1
bool EWM_no_external_stop_of_operation
bool EWM_user_defined_input_2
bool EWM_wire_available
bool EWM_wirefeeder_ok
bool EWM_gas_ok
bool EWM_cooland_water_ok
#
# Commented fields are not used in WAAM Interface (welding_display.cpp)
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','Dinse_wire_feed_speed','EWM_voltage','EWM_current','EWM_wire_feed_speed','Dinse_wire_feeder_ready','Dinse_collective_fault','Dinse_wire_feed_fault','Dinse_power_failure','Dinse_positioning_fault','Dinse_hot_wire_fault','Dinse_life_bit','Dinse_current_on','Dinse_service_interval','Dinse_intern_fault','Dinse_emergency_stop','Dinse_gas_fault','Dinse_water_fault','Dinse_process_active','Dinse_wire_end','Dinse_wire_movement_on_stop','EWM_current_flows','EWM_ready_for_welding','EWM_sticking','EWM_error_1','EWM_collision_signal','EWM_program_sequence_on_main_current','EWM_process_active','EWM_current_flows_aux_process','EWM_error_number','EWM_network_phases_status','EWM_user_defined_input_1','EWM_no_external_stop_of_operation','EWM_user_defined_input_2','EWM_wire_available','EWM_wirefeeder_ok','EWM_gas_ok','EWM_cooland_water_ok']
  _slot_types = ['std_msgs/Header','float32','float32','float32','float32','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','uint8','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,Dinse_wire_feed_speed,EWM_voltage,EWM_current,EWM_wire_feed_speed,Dinse_wire_feeder_ready,Dinse_collective_fault,Dinse_wire_feed_fault,Dinse_power_failure,Dinse_positioning_fault,Dinse_hot_wire_fault,Dinse_life_bit,Dinse_current_on,Dinse_service_interval,Dinse_intern_fault,Dinse_emergency_stop,Dinse_gas_fault,Dinse_water_fault,Dinse_process_active,Dinse_wire_end,Dinse_wire_movement_on_stop,EWM_current_flows,EWM_ready_for_welding,EWM_sticking,EWM_error_1,EWM_collision_signal,EWM_program_sequence_on_main_current,EWM_process_active,EWM_current_flows_aux_process,EWM_error_number,EWM_network_phases_status,EWM_user_defined_input_1,EWM_no_external_stop_of_operation,EWM_user_defined_input_2,EWM_wire_available,EWM_wirefeeder_ok,EWM_gas_ok,EWM_cooland_water_ok

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlasmaState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.Dinse_wire_feed_speed is None:
        self.Dinse_wire_feed_speed = 0.
      if self.EWM_voltage is None:
        self.EWM_voltage = 0.
      if self.EWM_current is None:
        self.EWM_current = 0.
      if self.EWM_wire_feed_speed is None:
        self.EWM_wire_feed_speed = 0.
      if self.Dinse_wire_feeder_ready is None:
        self.Dinse_wire_feeder_ready = False
      if self.Dinse_collective_fault is None:
        self.Dinse_collective_fault = False
      if self.Dinse_wire_feed_fault is None:
        self.Dinse_wire_feed_fault = False
      if self.Dinse_power_failure is None:
        self.Dinse_power_failure = False
      if self.Dinse_positioning_fault is None:
        self.Dinse_positioning_fault = False
      if self.Dinse_hot_wire_fault is None:
        self.Dinse_hot_wire_fault = False
      if self.Dinse_life_bit is None:
        self.Dinse_life_bit = False
      if self.Dinse_current_on is None:
        self.Dinse_current_on = False
      if self.Dinse_service_interval is None:
        self.Dinse_service_interval = False
      if self.Dinse_intern_fault is None:
        self.Dinse_intern_fault = False
      if self.Dinse_emergency_stop is None:
        self.Dinse_emergency_stop = False
      if self.Dinse_gas_fault is None:
        self.Dinse_gas_fault = False
      if self.Dinse_water_fault is None:
        self.Dinse_water_fault = False
      if self.Dinse_process_active is None:
        self.Dinse_process_active = False
      if self.Dinse_wire_end is None:
        self.Dinse_wire_end = False
      if self.Dinse_wire_movement_on_stop is None:
        self.Dinse_wire_movement_on_stop = False
      if self.EWM_current_flows is None:
        self.EWM_current_flows = False
      if self.EWM_ready_for_welding is None:
        self.EWM_ready_for_welding = False
      if self.EWM_sticking is None:
        self.EWM_sticking = False
      if self.EWM_error_1 is None:
        self.EWM_error_1 = False
      if self.EWM_collision_signal is None:
        self.EWM_collision_signal = False
      if self.EWM_program_sequence_on_main_current is None:
        self.EWM_program_sequence_on_main_current = False
      if self.EWM_process_active is None:
        self.EWM_process_active = False
      if self.EWM_current_flows_aux_process is None:
        self.EWM_current_flows_aux_process = False
      if self.EWM_error_number is None:
        self.EWM_error_number = 0
      if self.EWM_network_phases_status is None:
        self.EWM_network_phases_status = False
      if self.EWM_user_defined_input_1 is None:
        self.EWM_user_defined_input_1 = False
      if self.EWM_no_external_stop_of_operation is None:
        self.EWM_no_external_stop_of_operation = False
      if self.EWM_user_defined_input_2 is None:
        self.EWM_user_defined_input_2 = False
      if self.EWM_wire_available is None:
        self.EWM_wire_available = False
      if self.EWM_wirefeeder_ok is None:
        self.EWM_wirefeeder_ok = False
      if self.EWM_gas_ok is None:
        self.EWM_gas_ok = False
      if self.EWM_cooland_water_ok is None:
        self.EWM_cooland_water_ok = False
    else:
      self.header = std_msgs.msg.Header()
      self.Dinse_wire_feed_speed = 0.
      self.EWM_voltage = 0.
      self.EWM_current = 0.
      self.EWM_wire_feed_speed = 0.
      self.Dinse_wire_feeder_ready = False
      self.Dinse_collective_fault = False
      self.Dinse_wire_feed_fault = False
      self.Dinse_power_failure = False
      self.Dinse_positioning_fault = False
      self.Dinse_hot_wire_fault = False
      self.Dinse_life_bit = False
      self.Dinse_current_on = False
      self.Dinse_service_interval = False
      self.Dinse_intern_fault = False
      self.Dinse_emergency_stop = False
      self.Dinse_gas_fault = False
      self.Dinse_water_fault = False
      self.Dinse_process_active = False
      self.Dinse_wire_end = False
      self.Dinse_wire_movement_on_stop = False
      self.EWM_current_flows = False
      self.EWM_ready_for_welding = False
      self.EWM_sticking = False
      self.EWM_error_1 = False
      self.EWM_collision_signal = False
      self.EWM_program_sequence_on_main_current = False
      self.EWM_process_active = False
      self.EWM_current_flows_aux_process = False
      self.EWM_error_number = 0
      self.EWM_network_phases_status = False
      self.EWM_user_defined_input_1 = False
      self.EWM_no_external_stop_of_operation = False
      self.EWM_user_defined_input_2 = False
      self.EWM_wire_available = False
      self.EWM_wirefeeder_ok = False
      self.EWM_gas_ok = False
      self.EWM_cooland_water_ok = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4f33B().pack(_x.Dinse_wire_feed_speed, _x.EWM_voltage, _x.EWM_current, _x.EWM_wire_feed_speed, _x.Dinse_wire_feeder_ready, _x.Dinse_collective_fault, _x.Dinse_wire_feed_fault, _x.Dinse_power_failure, _x.Dinse_positioning_fault, _x.Dinse_hot_wire_fault, _x.Dinse_life_bit, _x.Dinse_current_on, _x.Dinse_service_interval, _x.Dinse_intern_fault, _x.Dinse_emergency_stop, _x.Dinse_gas_fault, _x.Dinse_water_fault, _x.Dinse_process_active, _x.Dinse_wire_end, _x.Dinse_wire_movement_on_stop, _x.EWM_current_flows, _x.EWM_ready_for_welding, _x.EWM_sticking, _x.EWM_error_1, _x.EWM_collision_signal, _x.EWM_program_sequence_on_main_current, _x.EWM_process_active, _x.EWM_current_flows_aux_process, _x.EWM_error_number, _x.EWM_network_phases_status, _x.EWM_user_defined_input_1, _x.EWM_no_external_stop_of_operation, _x.EWM_user_defined_input_2, _x.EWM_wire_available, _x.EWM_wirefeeder_ok, _x.EWM_gas_ok, _x.EWM_cooland_water_ok))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 49
      (_x.Dinse_wire_feed_speed, _x.EWM_voltage, _x.EWM_current, _x.EWM_wire_feed_speed, _x.Dinse_wire_feeder_ready, _x.Dinse_collective_fault, _x.Dinse_wire_feed_fault, _x.Dinse_power_failure, _x.Dinse_positioning_fault, _x.Dinse_hot_wire_fault, _x.Dinse_life_bit, _x.Dinse_current_on, _x.Dinse_service_interval, _x.Dinse_intern_fault, _x.Dinse_emergency_stop, _x.Dinse_gas_fault, _x.Dinse_water_fault, _x.Dinse_process_active, _x.Dinse_wire_end, _x.Dinse_wire_movement_on_stop, _x.EWM_current_flows, _x.EWM_ready_for_welding, _x.EWM_sticking, _x.EWM_error_1, _x.EWM_collision_signal, _x.EWM_program_sequence_on_main_current, _x.EWM_process_active, _x.EWM_current_flows_aux_process, _x.EWM_error_number, _x.EWM_network_phases_status, _x.EWM_user_defined_input_1, _x.EWM_no_external_stop_of_operation, _x.EWM_user_defined_input_2, _x.EWM_wire_available, _x.EWM_wirefeeder_ok, _x.EWM_gas_ok, _x.EWM_cooland_water_ok,) = _get_struct_4f33B().unpack(str[start:end])
      self.Dinse_wire_feeder_ready = bool(self.Dinse_wire_feeder_ready)
      self.Dinse_collective_fault = bool(self.Dinse_collective_fault)
      self.Dinse_wire_feed_fault = bool(self.Dinse_wire_feed_fault)
      self.Dinse_power_failure = bool(self.Dinse_power_failure)
      self.Dinse_positioning_fault = bool(self.Dinse_positioning_fault)
      self.Dinse_hot_wire_fault = bool(self.Dinse_hot_wire_fault)
      self.Dinse_life_bit = bool(self.Dinse_life_bit)
      self.Dinse_current_on = bool(self.Dinse_current_on)
      self.Dinse_service_interval = bool(self.Dinse_service_interval)
      self.Dinse_intern_fault = bool(self.Dinse_intern_fault)
      self.Dinse_emergency_stop = bool(self.Dinse_emergency_stop)
      self.Dinse_gas_fault = bool(self.Dinse_gas_fault)
      self.Dinse_water_fault = bool(self.Dinse_water_fault)
      self.Dinse_process_active = bool(self.Dinse_process_active)
      self.Dinse_wire_end = bool(self.Dinse_wire_end)
      self.Dinse_wire_movement_on_stop = bool(self.Dinse_wire_movement_on_stop)
      self.EWM_current_flows = bool(self.EWM_current_flows)
      self.EWM_ready_for_welding = bool(self.EWM_ready_for_welding)
      self.EWM_sticking = bool(self.EWM_sticking)
      self.EWM_error_1 = bool(self.EWM_error_1)
      self.EWM_collision_signal = bool(self.EWM_collision_signal)
      self.EWM_program_sequence_on_main_current = bool(self.EWM_program_sequence_on_main_current)
      self.EWM_process_active = bool(self.EWM_process_active)
      self.EWM_current_flows_aux_process = bool(self.EWM_current_flows_aux_process)
      self.EWM_network_phases_status = bool(self.EWM_network_phases_status)
      self.EWM_user_defined_input_1 = bool(self.EWM_user_defined_input_1)
      self.EWM_no_external_stop_of_operation = bool(self.EWM_no_external_stop_of_operation)
      self.EWM_user_defined_input_2 = bool(self.EWM_user_defined_input_2)
      self.EWM_wire_available = bool(self.EWM_wire_available)
      self.EWM_wirefeeder_ok = bool(self.EWM_wirefeeder_ok)
      self.EWM_gas_ok = bool(self.EWM_gas_ok)
      self.EWM_cooland_water_ok = bool(self.EWM_cooland_water_ok)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4f33B().pack(_x.Dinse_wire_feed_speed, _x.EWM_voltage, _x.EWM_current, _x.EWM_wire_feed_speed, _x.Dinse_wire_feeder_ready, _x.Dinse_collective_fault, _x.Dinse_wire_feed_fault, _x.Dinse_power_failure, _x.Dinse_positioning_fault, _x.Dinse_hot_wire_fault, _x.Dinse_life_bit, _x.Dinse_current_on, _x.Dinse_service_interval, _x.Dinse_intern_fault, _x.Dinse_emergency_stop, _x.Dinse_gas_fault, _x.Dinse_water_fault, _x.Dinse_process_active, _x.Dinse_wire_end, _x.Dinse_wire_movement_on_stop, _x.EWM_current_flows, _x.EWM_ready_for_welding, _x.EWM_sticking, _x.EWM_error_1, _x.EWM_collision_signal, _x.EWM_program_sequence_on_main_current, _x.EWM_process_active, _x.EWM_current_flows_aux_process, _x.EWM_error_number, _x.EWM_network_phases_status, _x.EWM_user_defined_input_1, _x.EWM_no_external_stop_of_operation, _x.EWM_user_defined_input_2, _x.EWM_wire_available, _x.EWM_wirefeeder_ok, _x.EWM_gas_ok, _x.EWM_cooland_water_ok))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 49
      (_x.Dinse_wire_feed_speed, _x.EWM_voltage, _x.EWM_current, _x.EWM_wire_feed_speed, _x.Dinse_wire_feeder_ready, _x.Dinse_collective_fault, _x.Dinse_wire_feed_fault, _x.Dinse_power_failure, _x.Dinse_positioning_fault, _x.Dinse_hot_wire_fault, _x.Dinse_life_bit, _x.Dinse_current_on, _x.Dinse_service_interval, _x.Dinse_intern_fault, _x.Dinse_emergency_stop, _x.Dinse_gas_fault, _x.Dinse_water_fault, _x.Dinse_process_active, _x.Dinse_wire_end, _x.Dinse_wire_movement_on_stop, _x.EWM_current_flows, _x.EWM_ready_for_welding, _x.EWM_sticking, _x.EWM_error_1, _x.EWM_collision_signal, _x.EWM_program_sequence_on_main_current, _x.EWM_process_active, _x.EWM_current_flows_aux_process, _x.EWM_error_number, _x.EWM_network_phases_status, _x.EWM_user_defined_input_1, _x.EWM_no_external_stop_of_operation, _x.EWM_user_defined_input_2, _x.EWM_wire_available, _x.EWM_wirefeeder_ok, _x.EWM_gas_ok, _x.EWM_cooland_water_ok,) = _get_struct_4f33B().unpack(str[start:end])
      self.Dinse_wire_feeder_ready = bool(self.Dinse_wire_feeder_ready)
      self.Dinse_collective_fault = bool(self.Dinse_collective_fault)
      self.Dinse_wire_feed_fault = bool(self.Dinse_wire_feed_fault)
      self.Dinse_power_failure = bool(self.Dinse_power_failure)
      self.Dinse_positioning_fault = bool(self.Dinse_positioning_fault)
      self.Dinse_hot_wire_fault = bool(self.Dinse_hot_wire_fault)
      self.Dinse_life_bit = bool(self.Dinse_life_bit)
      self.Dinse_current_on = bool(self.Dinse_current_on)
      self.Dinse_service_interval = bool(self.Dinse_service_interval)
      self.Dinse_intern_fault = bool(self.Dinse_intern_fault)
      self.Dinse_emergency_stop = bool(self.Dinse_emergency_stop)
      self.Dinse_gas_fault = bool(self.Dinse_gas_fault)
      self.Dinse_water_fault = bool(self.Dinse_water_fault)
      self.Dinse_process_active = bool(self.Dinse_process_active)
      self.Dinse_wire_end = bool(self.Dinse_wire_end)
      self.Dinse_wire_movement_on_stop = bool(self.Dinse_wire_movement_on_stop)
      self.EWM_current_flows = bool(self.EWM_current_flows)
      self.EWM_ready_for_welding = bool(self.EWM_ready_for_welding)
      self.EWM_sticking = bool(self.EWM_sticking)
      self.EWM_error_1 = bool(self.EWM_error_1)
      self.EWM_collision_signal = bool(self.EWM_collision_signal)
      self.EWM_program_sequence_on_main_current = bool(self.EWM_program_sequence_on_main_current)
      self.EWM_process_active = bool(self.EWM_process_active)
      self.EWM_current_flows_aux_process = bool(self.EWM_current_flows_aux_process)
      self.EWM_network_phases_status = bool(self.EWM_network_phases_status)
      self.EWM_user_defined_input_1 = bool(self.EWM_user_defined_input_1)
      self.EWM_no_external_stop_of_operation = bool(self.EWM_no_external_stop_of_operation)
      self.EWM_user_defined_input_2 = bool(self.EWM_user_defined_input_2)
      self.EWM_wire_available = bool(self.EWM_wire_available)
      self.EWM_wirefeeder_ok = bool(self.EWM_wirefeeder_ok)
      self.EWM_gas_ok = bool(self.EWM_gas_ok)
      self.EWM_cooland_water_ok = bool(self.EWM_cooland_water_ok)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4f33B = None
def _get_struct_4f33B():
    global _struct_4f33B
    if _struct_4f33B is None:
        _struct_4f33B = struct.Struct("<4f33B")
    return _struct_4f33B
