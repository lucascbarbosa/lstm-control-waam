# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kuka_rsi_msgs/Fronius500iState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class Fronius500iState(genpy.Message):
  _md5sum = "4355219bc4b3af559fd32d94b33e5f02"
  _type = "kuka_rsi_msgs/Fronius500iState"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
# Input[4]
float32 welding_voltage
# Input[5]
float32 welding_current
# Input[6]
float32 wire_feed_speed
# Input[7]
float32 motor_current_M1
# Input[8]
float32 motor_current_M2
# Input[0]
bool life_toggle_bit # 0
bool power_source_ready # 1
bool warning # 2
bool process_active # 3
bool current_flow # 4
bool arc_stable # 5
bool main_current_signal # 6
bool touch_signal # 7
# Input[1]
bool collisionbox_active # 0
bool robot_motion_release # 1
bool wire_stick_workpiece # 2
bool short_circuit_contact_tip # 4
bool parameter_selection_internally # 5
bool characteristic_number_valid # 6
bool torch_body_gripped # 7
# Input[2]
bool command_value_out_of_range # 0
bool correction_out_of_range # 1
bool limitsignal # 3
bool main_supply_status # 6
# Input[3]
uint8 process_id # 0-4
string process_str # none
bool touch_signal_gas_nozzle # 6
bool twin_synchro_active # 7

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','welding_voltage','welding_current','wire_feed_speed','motor_current_M1','motor_current_M2','life_toggle_bit','power_source_ready','warning','process_active','current_flow','arc_stable','main_current_signal','touch_signal','collisionbox_active','robot_motion_release','wire_stick_workpiece','short_circuit_contact_tip','parameter_selection_internally','characteristic_number_valid','torch_body_gripped','command_value_out_of_range','correction_out_of_range','limitsignal','main_supply_status','process_id','process_str','touch_signal_gas_nozzle','twin_synchro_active']
  _slot_types = ['std_msgs/Header','float32','float32','float32','float32','float32','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','uint8','string','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,welding_voltage,welding_current,wire_feed_speed,motor_current_M1,motor_current_M2,life_toggle_bit,power_source_ready,warning,process_active,current_flow,arc_stable,main_current_signal,touch_signal,collisionbox_active,robot_motion_release,wire_stick_workpiece,short_circuit_contact_tip,parameter_selection_internally,characteristic_number_valid,torch_body_gripped,command_value_out_of_range,correction_out_of_range,limitsignal,main_supply_status,process_id,process_str,touch_signal_gas_nozzle,twin_synchro_active

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Fronius500iState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.welding_voltage is None:
        self.welding_voltage = 0.
      if self.welding_current is None:
        self.welding_current = 0.
      if self.wire_feed_speed is None:
        self.wire_feed_speed = 0.
      if self.motor_current_M1 is None:
        self.motor_current_M1 = 0.
      if self.motor_current_M2 is None:
        self.motor_current_M2 = 0.
      if self.life_toggle_bit is None:
        self.life_toggle_bit = False
      if self.power_source_ready is None:
        self.power_source_ready = False
      if self.warning is None:
        self.warning = False
      if self.process_active is None:
        self.process_active = False
      if self.current_flow is None:
        self.current_flow = False
      if self.arc_stable is None:
        self.arc_stable = False
      if self.main_current_signal is None:
        self.main_current_signal = False
      if self.touch_signal is None:
        self.touch_signal = False
      if self.collisionbox_active is None:
        self.collisionbox_active = False
      if self.robot_motion_release is None:
        self.robot_motion_release = False
      if self.wire_stick_workpiece is None:
        self.wire_stick_workpiece = False
      if self.short_circuit_contact_tip is None:
        self.short_circuit_contact_tip = False
      if self.parameter_selection_internally is None:
        self.parameter_selection_internally = False
      if self.characteristic_number_valid is None:
        self.characteristic_number_valid = False
      if self.torch_body_gripped is None:
        self.torch_body_gripped = False
      if self.command_value_out_of_range is None:
        self.command_value_out_of_range = False
      if self.correction_out_of_range is None:
        self.correction_out_of_range = False
      if self.limitsignal is None:
        self.limitsignal = False
      if self.main_supply_status is None:
        self.main_supply_status = False
      if self.process_id is None:
        self.process_id = 0
      if self.process_str is None:
        self.process_str = ''
      if self.touch_signal_gas_nozzle is None:
        self.touch_signal_gas_nozzle = False
      if self.twin_synchro_active is None:
        self.twin_synchro_active = False
    else:
      self.header = std_msgs.msg.Header()
      self.welding_voltage = 0.
      self.welding_current = 0.
      self.wire_feed_speed = 0.
      self.motor_current_M1 = 0.
      self.motor_current_M2 = 0.
      self.life_toggle_bit = False
      self.power_source_ready = False
      self.warning = False
      self.process_active = False
      self.current_flow = False
      self.arc_stable = False
      self.main_current_signal = False
      self.touch_signal = False
      self.collisionbox_active = False
      self.robot_motion_release = False
      self.wire_stick_workpiece = False
      self.short_circuit_contact_tip = False
      self.parameter_selection_internally = False
      self.characteristic_number_valid = False
      self.torch_body_gripped = False
      self.command_value_out_of_range = False
      self.correction_out_of_range = False
      self.limitsignal = False
      self.main_supply_status = False
      self.process_id = 0
      self.process_str = ''
      self.touch_signal_gas_nozzle = False
      self.twin_synchro_active = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5f20B().pack(_x.welding_voltage, _x.welding_current, _x.wire_feed_speed, _x.motor_current_M1, _x.motor_current_M2, _x.life_toggle_bit, _x.power_source_ready, _x.warning, _x.process_active, _x.current_flow, _x.arc_stable, _x.main_current_signal, _x.touch_signal, _x.collisionbox_active, _x.robot_motion_release, _x.wire_stick_workpiece, _x.short_circuit_contact_tip, _x.parameter_selection_internally, _x.characteristic_number_valid, _x.torch_body_gripped, _x.command_value_out_of_range, _x.correction_out_of_range, _x.limitsignal, _x.main_supply_status, _x.process_id))
      _x = self.process_str
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B().pack(_x.touch_signal_gas_nozzle, _x.twin_synchro_active))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 40
      (_x.welding_voltage, _x.welding_current, _x.wire_feed_speed, _x.motor_current_M1, _x.motor_current_M2, _x.life_toggle_bit, _x.power_source_ready, _x.warning, _x.process_active, _x.current_flow, _x.arc_stable, _x.main_current_signal, _x.touch_signal, _x.collisionbox_active, _x.robot_motion_release, _x.wire_stick_workpiece, _x.short_circuit_contact_tip, _x.parameter_selection_internally, _x.characteristic_number_valid, _x.torch_body_gripped, _x.command_value_out_of_range, _x.correction_out_of_range, _x.limitsignal, _x.main_supply_status, _x.process_id,) = _get_struct_5f20B().unpack(str[start:end])
      self.life_toggle_bit = bool(self.life_toggle_bit)
      self.power_source_ready = bool(self.power_source_ready)
      self.warning = bool(self.warning)
      self.process_active = bool(self.process_active)
      self.current_flow = bool(self.current_flow)
      self.arc_stable = bool(self.arc_stable)
      self.main_current_signal = bool(self.main_current_signal)
      self.touch_signal = bool(self.touch_signal)
      self.collisionbox_active = bool(self.collisionbox_active)
      self.robot_motion_release = bool(self.robot_motion_release)
      self.wire_stick_workpiece = bool(self.wire_stick_workpiece)
      self.short_circuit_contact_tip = bool(self.short_circuit_contact_tip)
      self.parameter_selection_internally = bool(self.parameter_selection_internally)
      self.characteristic_number_valid = bool(self.characteristic_number_valid)
      self.torch_body_gripped = bool(self.torch_body_gripped)
      self.command_value_out_of_range = bool(self.command_value_out_of_range)
      self.correction_out_of_range = bool(self.correction_out_of_range)
      self.limitsignal = bool(self.limitsignal)
      self.main_supply_status = bool(self.main_supply_status)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.process_str = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.process_str = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.touch_signal_gas_nozzle, _x.twin_synchro_active,) = _get_struct_2B().unpack(str[start:end])
      self.touch_signal_gas_nozzle = bool(self.touch_signal_gas_nozzle)
      self.twin_synchro_active = bool(self.twin_synchro_active)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5f20B().pack(_x.welding_voltage, _x.welding_current, _x.wire_feed_speed, _x.motor_current_M1, _x.motor_current_M2, _x.life_toggle_bit, _x.power_source_ready, _x.warning, _x.process_active, _x.current_flow, _x.arc_stable, _x.main_current_signal, _x.touch_signal, _x.collisionbox_active, _x.robot_motion_release, _x.wire_stick_workpiece, _x.short_circuit_contact_tip, _x.parameter_selection_internally, _x.characteristic_number_valid, _x.torch_body_gripped, _x.command_value_out_of_range, _x.correction_out_of_range, _x.limitsignal, _x.main_supply_status, _x.process_id))
      _x = self.process_str
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B().pack(_x.touch_signal_gas_nozzle, _x.twin_synchro_active))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 40
      (_x.welding_voltage, _x.welding_current, _x.wire_feed_speed, _x.motor_current_M1, _x.motor_current_M2, _x.life_toggle_bit, _x.power_source_ready, _x.warning, _x.process_active, _x.current_flow, _x.arc_stable, _x.main_current_signal, _x.touch_signal, _x.collisionbox_active, _x.robot_motion_release, _x.wire_stick_workpiece, _x.short_circuit_contact_tip, _x.parameter_selection_internally, _x.characteristic_number_valid, _x.torch_body_gripped, _x.command_value_out_of_range, _x.correction_out_of_range, _x.limitsignal, _x.main_supply_status, _x.process_id,) = _get_struct_5f20B().unpack(str[start:end])
      self.life_toggle_bit = bool(self.life_toggle_bit)
      self.power_source_ready = bool(self.power_source_ready)
      self.warning = bool(self.warning)
      self.process_active = bool(self.process_active)
      self.current_flow = bool(self.current_flow)
      self.arc_stable = bool(self.arc_stable)
      self.main_current_signal = bool(self.main_current_signal)
      self.touch_signal = bool(self.touch_signal)
      self.collisionbox_active = bool(self.collisionbox_active)
      self.robot_motion_release = bool(self.robot_motion_release)
      self.wire_stick_workpiece = bool(self.wire_stick_workpiece)
      self.short_circuit_contact_tip = bool(self.short_circuit_contact_tip)
      self.parameter_selection_internally = bool(self.parameter_selection_internally)
      self.characteristic_number_valid = bool(self.characteristic_number_valid)
      self.torch_body_gripped = bool(self.torch_body_gripped)
      self.command_value_out_of_range = bool(self.command_value_out_of_range)
      self.correction_out_of_range = bool(self.correction_out_of_range)
      self.limitsignal = bool(self.limitsignal)
      self.main_supply_status = bool(self.main_supply_status)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.process_str = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.process_str = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.touch_signal_gas_nozzle, _x.twin_synchro_active,) = _get_struct_2B().unpack(str[start:end])
      self.touch_signal_gas_nozzle = bool(self.touch_signal_gas_nozzle)
      self.twin_synchro_active = bool(self.twin_synchro_active)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_5f20B = None
def _get_struct_5f20B():
    global _struct_5f20B
    if _struct_5f20B is None:
        _struct_5f20B = struct.Struct("<5f20B")
    return _struct_5f20B
