# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kuka_rsi_msgs/FroniusCommand.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class FroniusCommand(genpy.Message):
  _md5sum = "3db99eb4c29a0d366f39cbc70352a89a"
  _type = "kuka_rsi_msgs/FroniusCommand"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
# Field 5-6
float32 power_set_value
# Field 7-8
float32 arc_length_correction
# Field 9
float32 dynamic_correction
# Field 10
float32 burn_back
# Field 1
bool welding_start
# Field 2
uint8 working_modes
# bool working_modes_bit0
# bool working_modes_bit1
# bool working_modes_bit2
bool master_selection_twin
bool gas_test
bool wire_forward
# Field 3
uint8 job_number
# Field 4
uint8 program_number
bool welding_simulation
# Field 11
bool synchro_pulse_disable
bool SFI_disable
bool dynamic_correction_disable
bool burn_back_disable
bool full_power_range

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','power_set_value','arc_length_correction','dynamic_correction','burn_back','welding_start','working_modes','master_selection_twin','gas_test','wire_forward','job_number','program_number','welding_simulation','synchro_pulse_disable','SFI_disable','dynamic_correction_disable','burn_back_disable','full_power_range']
  _slot_types = ['std_msgs/Header','float32','float32','float32','float32','bool','uint8','bool','bool','bool','uint8','uint8','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,power_set_value,arc_length_correction,dynamic_correction,burn_back,welding_start,working_modes,master_selection_twin,gas_test,wire_forward,job_number,program_number,welding_simulation,synchro_pulse_disable,SFI_disable,dynamic_correction_disable,burn_back_disable,full_power_range

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FroniusCommand, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.power_set_value is None:
        self.power_set_value = 0.
      if self.arc_length_correction is None:
        self.arc_length_correction = 0.
      if self.dynamic_correction is None:
        self.dynamic_correction = 0.
      if self.burn_back is None:
        self.burn_back = 0.
      if self.welding_start is None:
        self.welding_start = False
      if self.working_modes is None:
        self.working_modes = 0
      if self.master_selection_twin is None:
        self.master_selection_twin = False
      if self.gas_test is None:
        self.gas_test = False
      if self.wire_forward is None:
        self.wire_forward = False
      if self.job_number is None:
        self.job_number = 0
      if self.program_number is None:
        self.program_number = 0
      if self.welding_simulation is None:
        self.welding_simulation = False
      if self.synchro_pulse_disable is None:
        self.synchro_pulse_disable = False
      if self.SFI_disable is None:
        self.SFI_disable = False
      if self.dynamic_correction_disable is None:
        self.dynamic_correction_disable = False
      if self.burn_back_disable is None:
        self.burn_back_disable = False
      if self.full_power_range is None:
        self.full_power_range = False
    else:
      self.header = std_msgs.msg.Header()
      self.power_set_value = 0.
      self.arc_length_correction = 0.
      self.dynamic_correction = 0.
      self.burn_back = 0.
      self.welding_start = False
      self.working_modes = 0
      self.master_selection_twin = False
      self.gas_test = False
      self.wire_forward = False
      self.job_number = 0
      self.program_number = 0
      self.welding_simulation = False
      self.synchro_pulse_disable = False
      self.SFI_disable = False
      self.dynamic_correction_disable = False
      self.burn_back_disable = False
      self.full_power_range = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4f13B().pack(_x.power_set_value, _x.arc_length_correction, _x.dynamic_correction, _x.burn_back, _x.welding_start, _x.working_modes, _x.master_selection_twin, _x.gas_test, _x.wire_forward, _x.job_number, _x.program_number, _x.welding_simulation, _x.synchro_pulse_disable, _x.SFI_disable, _x.dynamic_correction_disable, _x.burn_back_disable, _x.full_power_range))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 29
      (_x.power_set_value, _x.arc_length_correction, _x.dynamic_correction, _x.burn_back, _x.welding_start, _x.working_modes, _x.master_selection_twin, _x.gas_test, _x.wire_forward, _x.job_number, _x.program_number, _x.welding_simulation, _x.synchro_pulse_disable, _x.SFI_disable, _x.dynamic_correction_disable, _x.burn_back_disable, _x.full_power_range,) = _get_struct_4f13B().unpack(str[start:end])
      self.welding_start = bool(self.welding_start)
      self.master_selection_twin = bool(self.master_selection_twin)
      self.gas_test = bool(self.gas_test)
      self.wire_forward = bool(self.wire_forward)
      self.welding_simulation = bool(self.welding_simulation)
      self.synchro_pulse_disable = bool(self.synchro_pulse_disable)
      self.SFI_disable = bool(self.SFI_disable)
      self.dynamic_correction_disable = bool(self.dynamic_correction_disable)
      self.burn_back_disable = bool(self.burn_back_disable)
      self.full_power_range = bool(self.full_power_range)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4f13B().pack(_x.power_set_value, _x.arc_length_correction, _x.dynamic_correction, _x.burn_back, _x.welding_start, _x.working_modes, _x.master_selection_twin, _x.gas_test, _x.wire_forward, _x.job_number, _x.program_number, _x.welding_simulation, _x.synchro_pulse_disable, _x.SFI_disable, _x.dynamic_correction_disable, _x.burn_back_disable, _x.full_power_range))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 29
      (_x.power_set_value, _x.arc_length_correction, _x.dynamic_correction, _x.burn_back, _x.welding_start, _x.working_modes, _x.master_selection_twin, _x.gas_test, _x.wire_forward, _x.job_number, _x.program_number, _x.welding_simulation, _x.synchro_pulse_disable, _x.SFI_disable, _x.dynamic_correction_disable, _x.burn_back_disable, _x.full_power_range,) = _get_struct_4f13B().unpack(str[start:end])
      self.welding_start = bool(self.welding_start)
      self.master_selection_twin = bool(self.master_selection_twin)
      self.gas_test = bool(self.gas_test)
      self.wire_forward = bool(self.wire_forward)
      self.welding_simulation = bool(self.welding_simulation)
      self.synchro_pulse_disable = bool(self.synchro_pulse_disable)
      self.SFI_disable = bool(self.SFI_disable)
      self.dynamic_correction_disable = bool(self.dynamic_correction_disable)
      self.burn_back_disable = bool(self.burn_back_disable)
      self.full_power_range = bool(self.full_power_range)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4f13B = None
def _get_struct_4f13B():
    global _struct_4f13B
    if _struct_4f13B is None:
        _struct_4f13B = struct.Struct("<4f13B")
    return _struct_4f13B
