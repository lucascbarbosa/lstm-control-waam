# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kuka_rsi_msgs/FroniusState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class FroniusState(genpy.Message):
  _md5sum = "30bd5f2b575dd738b94a41edaf98cf7f"
  _type = "kuka_rsi_msgs/FroniusState"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
# Field 4-5
float32 arc_voltage
# Field 6-7
float32 arc_current
# Field 8
float32 motor_current
# Field 9-10
float32 wire_feed_speed
# Field 1
bool arc_stable
bool limit_signal
bool process_active
bool main_current_signal
bool torch_collision_protection
bool power_source_ready
bool communication_ready
bool life_toggle_bit
# Field 2
uint8 error_number
# Field 3
bool wire_stick_control
bool robot_access
bool wire_available
bool timeout_short_circuit
bool data_documentation_ready
bool power_outside_range
#
# Commented fields are not used in WAAM Interface (welding_display.cpp)
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','arc_voltage','arc_current','motor_current','wire_feed_speed','arc_stable','limit_signal','process_active','main_current_signal','torch_collision_protection','power_source_ready','communication_ready','life_toggle_bit','error_number','wire_stick_control','robot_access','wire_available','timeout_short_circuit','data_documentation_ready','power_outside_range']
  _slot_types = ['std_msgs/Header','float32','float32','float32','float32','bool','bool','bool','bool','bool','bool','bool','bool','uint8','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,arc_voltage,arc_current,motor_current,wire_feed_speed,arc_stable,limit_signal,process_active,main_current_signal,torch_collision_protection,power_source_ready,communication_ready,life_toggle_bit,error_number,wire_stick_control,robot_access,wire_available,timeout_short_circuit,data_documentation_ready,power_outside_range

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FroniusState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.arc_voltage is None:
        self.arc_voltage = 0.
      if self.arc_current is None:
        self.arc_current = 0.
      if self.motor_current is None:
        self.motor_current = 0.
      if self.wire_feed_speed is None:
        self.wire_feed_speed = 0.
      if self.arc_stable is None:
        self.arc_stable = False
      if self.limit_signal is None:
        self.limit_signal = False
      if self.process_active is None:
        self.process_active = False
      if self.main_current_signal is None:
        self.main_current_signal = False
      if self.torch_collision_protection is None:
        self.torch_collision_protection = False
      if self.power_source_ready is None:
        self.power_source_ready = False
      if self.communication_ready is None:
        self.communication_ready = False
      if self.life_toggle_bit is None:
        self.life_toggle_bit = False
      if self.error_number is None:
        self.error_number = 0
      if self.wire_stick_control is None:
        self.wire_stick_control = False
      if self.robot_access is None:
        self.robot_access = False
      if self.wire_available is None:
        self.wire_available = False
      if self.timeout_short_circuit is None:
        self.timeout_short_circuit = False
      if self.data_documentation_ready is None:
        self.data_documentation_ready = False
      if self.power_outside_range is None:
        self.power_outside_range = False
    else:
      self.header = std_msgs.msg.Header()
      self.arc_voltage = 0.
      self.arc_current = 0.
      self.motor_current = 0.
      self.wire_feed_speed = 0.
      self.arc_stable = False
      self.limit_signal = False
      self.process_active = False
      self.main_current_signal = False
      self.torch_collision_protection = False
      self.power_source_ready = False
      self.communication_ready = False
      self.life_toggle_bit = False
      self.error_number = 0
      self.wire_stick_control = False
      self.robot_access = False
      self.wire_available = False
      self.timeout_short_circuit = False
      self.data_documentation_ready = False
      self.power_outside_range = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4f15B().pack(_x.arc_voltage, _x.arc_current, _x.motor_current, _x.wire_feed_speed, _x.arc_stable, _x.limit_signal, _x.process_active, _x.main_current_signal, _x.torch_collision_protection, _x.power_source_ready, _x.communication_ready, _x.life_toggle_bit, _x.error_number, _x.wire_stick_control, _x.robot_access, _x.wire_available, _x.timeout_short_circuit, _x.data_documentation_ready, _x.power_outside_range))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 31
      (_x.arc_voltage, _x.arc_current, _x.motor_current, _x.wire_feed_speed, _x.arc_stable, _x.limit_signal, _x.process_active, _x.main_current_signal, _x.torch_collision_protection, _x.power_source_ready, _x.communication_ready, _x.life_toggle_bit, _x.error_number, _x.wire_stick_control, _x.robot_access, _x.wire_available, _x.timeout_short_circuit, _x.data_documentation_ready, _x.power_outside_range,) = _get_struct_4f15B().unpack(str[start:end])
      self.arc_stable = bool(self.arc_stable)
      self.limit_signal = bool(self.limit_signal)
      self.process_active = bool(self.process_active)
      self.main_current_signal = bool(self.main_current_signal)
      self.torch_collision_protection = bool(self.torch_collision_protection)
      self.power_source_ready = bool(self.power_source_ready)
      self.communication_ready = bool(self.communication_ready)
      self.life_toggle_bit = bool(self.life_toggle_bit)
      self.wire_stick_control = bool(self.wire_stick_control)
      self.robot_access = bool(self.robot_access)
      self.wire_available = bool(self.wire_available)
      self.timeout_short_circuit = bool(self.timeout_short_circuit)
      self.data_documentation_ready = bool(self.data_documentation_ready)
      self.power_outside_range = bool(self.power_outside_range)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4f15B().pack(_x.arc_voltage, _x.arc_current, _x.motor_current, _x.wire_feed_speed, _x.arc_stable, _x.limit_signal, _x.process_active, _x.main_current_signal, _x.torch_collision_protection, _x.power_source_ready, _x.communication_ready, _x.life_toggle_bit, _x.error_number, _x.wire_stick_control, _x.robot_access, _x.wire_available, _x.timeout_short_circuit, _x.data_documentation_ready, _x.power_outside_range))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 31
      (_x.arc_voltage, _x.arc_current, _x.motor_current, _x.wire_feed_speed, _x.arc_stable, _x.limit_signal, _x.process_active, _x.main_current_signal, _x.torch_collision_protection, _x.power_source_ready, _x.communication_ready, _x.life_toggle_bit, _x.error_number, _x.wire_stick_control, _x.robot_access, _x.wire_available, _x.timeout_short_circuit, _x.data_documentation_ready, _x.power_outside_range,) = _get_struct_4f15B().unpack(str[start:end])
      self.arc_stable = bool(self.arc_stable)
      self.limit_signal = bool(self.limit_signal)
      self.process_active = bool(self.process_active)
      self.main_current_signal = bool(self.main_current_signal)
      self.torch_collision_protection = bool(self.torch_collision_protection)
      self.power_source_ready = bool(self.power_source_ready)
      self.communication_ready = bool(self.communication_ready)
      self.life_toggle_bit = bool(self.life_toggle_bit)
      self.wire_stick_control = bool(self.wire_stick_control)
      self.robot_access = bool(self.robot_access)
      self.wire_available = bool(self.wire_available)
      self.timeout_short_circuit = bool(self.timeout_short_circuit)
      self.data_documentation_ready = bool(self.data_documentation_ready)
      self.power_outside_range = bool(self.power_outside_range)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4f15B = None
def _get_struct_4f15B():
    global _struct_4f15B
    if _struct_4f15B is None:
        _struct_4f15B = struct.Struct("<4f15B")
    return _struct_4f15B
