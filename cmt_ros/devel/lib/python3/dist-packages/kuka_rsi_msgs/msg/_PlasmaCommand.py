# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kuka_rsi_msgs/PlasmaCommand.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class PlasmaCommand(genpy.Message):
  _md5sum = "e908814e1fa1f45ddd9838e2ac41ab4e"
  _type = "kuka_rsi_msgs/PlasmaCommand"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
# Field 3-4
float32 Dinse_wire_feed_speed
# Field 8-9
float32 EWM_current
# Field 12-13
float32 EWM_plasma_gas
# Field 14-15
float32 EWM_shield_gas
# Field 1
bool Dinse_start_release
bool Dinse_acknowledge_fault
bool Dinse_start_wire_feed
bool Dinse_start_power_source
bool Dinse_wirebreak
bool Dinse_wire_forward
bool Dinse_wire_backward
bool Dinse_gas_on
# Field 2
bool Dinse_retraction
bool Dinse_positioning
# Field 5
bool EWM_Start
# Field 6
bool EWM_gas_test_1_shield
bool EWM_gas_test_2_plasma
bool EWM_feed_wire
bool EWM_unfeed_wire
bool EWM_position_search
bool EWM_error_reset
bool EWM_start_aux_process
bool EWM_user_relay
# Field 7
bool EWM_welding_simulation
bool EWM_monitoring_function
bool EWM_filler_wire_activated
bool EWM_reserved_1
bool EWM_weld_mode_select_bit_0
bool EWM_weld_mode_select_bit_1
bool EWM_wirefeeder_switch
bool EWM_reserved_2
# Field 10-11
float32 EWM_cold_wire_feed_speed
# Field 16
uint8 EWM_job_number
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','Dinse_wire_feed_speed','EWM_current','EWM_plasma_gas','EWM_shield_gas','Dinse_start_release','Dinse_acknowledge_fault','Dinse_start_wire_feed','Dinse_start_power_source','Dinse_wirebreak','Dinse_wire_forward','Dinse_wire_backward','Dinse_gas_on','Dinse_retraction','Dinse_positioning','EWM_Start','EWM_gas_test_1_shield','EWM_gas_test_2_plasma','EWM_feed_wire','EWM_unfeed_wire','EWM_position_search','EWM_error_reset','EWM_start_aux_process','EWM_user_relay','EWM_welding_simulation','EWM_monitoring_function','EWM_filler_wire_activated','EWM_reserved_1','EWM_weld_mode_select_bit_0','EWM_weld_mode_select_bit_1','EWM_wirefeeder_switch','EWM_reserved_2','EWM_cold_wire_feed_speed','EWM_job_number']
  _slot_types = ['std_msgs/Header','float32','float32','float32','float32','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','float32','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,Dinse_wire_feed_speed,EWM_current,EWM_plasma_gas,EWM_shield_gas,Dinse_start_release,Dinse_acknowledge_fault,Dinse_start_wire_feed,Dinse_start_power_source,Dinse_wirebreak,Dinse_wire_forward,Dinse_wire_backward,Dinse_gas_on,Dinse_retraction,Dinse_positioning,EWM_Start,EWM_gas_test_1_shield,EWM_gas_test_2_plasma,EWM_feed_wire,EWM_unfeed_wire,EWM_position_search,EWM_error_reset,EWM_start_aux_process,EWM_user_relay,EWM_welding_simulation,EWM_monitoring_function,EWM_filler_wire_activated,EWM_reserved_1,EWM_weld_mode_select_bit_0,EWM_weld_mode_select_bit_1,EWM_wirefeeder_switch,EWM_reserved_2,EWM_cold_wire_feed_speed,EWM_job_number

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlasmaCommand, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.Dinse_wire_feed_speed is None:
        self.Dinse_wire_feed_speed = 0.
      if self.EWM_current is None:
        self.EWM_current = 0.
      if self.EWM_plasma_gas is None:
        self.EWM_plasma_gas = 0.
      if self.EWM_shield_gas is None:
        self.EWM_shield_gas = 0.
      if self.Dinse_start_release is None:
        self.Dinse_start_release = False
      if self.Dinse_acknowledge_fault is None:
        self.Dinse_acknowledge_fault = False
      if self.Dinse_start_wire_feed is None:
        self.Dinse_start_wire_feed = False
      if self.Dinse_start_power_source is None:
        self.Dinse_start_power_source = False
      if self.Dinse_wirebreak is None:
        self.Dinse_wirebreak = False
      if self.Dinse_wire_forward is None:
        self.Dinse_wire_forward = False
      if self.Dinse_wire_backward is None:
        self.Dinse_wire_backward = False
      if self.Dinse_gas_on is None:
        self.Dinse_gas_on = False
      if self.Dinse_retraction is None:
        self.Dinse_retraction = False
      if self.Dinse_positioning is None:
        self.Dinse_positioning = False
      if self.EWM_Start is None:
        self.EWM_Start = False
      if self.EWM_gas_test_1_shield is None:
        self.EWM_gas_test_1_shield = False
      if self.EWM_gas_test_2_plasma is None:
        self.EWM_gas_test_2_plasma = False
      if self.EWM_feed_wire is None:
        self.EWM_feed_wire = False
      if self.EWM_unfeed_wire is None:
        self.EWM_unfeed_wire = False
      if self.EWM_position_search is None:
        self.EWM_position_search = False
      if self.EWM_error_reset is None:
        self.EWM_error_reset = False
      if self.EWM_start_aux_process is None:
        self.EWM_start_aux_process = False
      if self.EWM_user_relay is None:
        self.EWM_user_relay = False
      if self.EWM_welding_simulation is None:
        self.EWM_welding_simulation = False
      if self.EWM_monitoring_function is None:
        self.EWM_monitoring_function = False
      if self.EWM_filler_wire_activated is None:
        self.EWM_filler_wire_activated = False
      if self.EWM_reserved_1 is None:
        self.EWM_reserved_1 = False
      if self.EWM_weld_mode_select_bit_0 is None:
        self.EWM_weld_mode_select_bit_0 = False
      if self.EWM_weld_mode_select_bit_1 is None:
        self.EWM_weld_mode_select_bit_1 = False
      if self.EWM_wirefeeder_switch is None:
        self.EWM_wirefeeder_switch = False
      if self.EWM_reserved_2 is None:
        self.EWM_reserved_2 = False
      if self.EWM_cold_wire_feed_speed is None:
        self.EWM_cold_wire_feed_speed = 0.
      if self.EWM_job_number is None:
        self.EWM_job_number = 0
    else:
      self.header = std_msgs.msg.Header()
      self.Dinse_wire_feed_speed = 0.
      self.EWM_current = 0.
      self.EWM_plasma_gas = 0.
      self.EWM_shield_gas = 0.
      self.Dinse_start_release = False
      self.Dinse_acknowledge_fault = False
      self.Dinse_start_wire_feed = False
      self.Dinse_start_power_source = False
      self.Dinse_wirebreak = False
      self.Dinse_wire_forward = False
      self.Dinse_wire_backward = False
      self.Dinse_gas_on = False
      self.Dinse_retraction = False
      self.Dinse_positioning = False
      self.EWM_Start = False
      self.EWM_gas_test_1_shield = False
      self.EWM_gas_test_2_plasma = False
      self.EWM_feed_wire = False
      self.EWM_unfeed_wire = False
      self.EWM_position_search = False
      self.EWM_error_reset = False
      self.EWM_start_aux_process = False
      self.EWM_user_relay = False
      self.EWM_welding_simulation = False
      self.EWM_monitoring_function = False
      self.EWM_filler_wire_activated = False
      self.EWM_reserved_1 = False
      self.EWM_weld_mode_select_bit_0 = False
      self.EWM_weld_mode_select_bit_1 = False
      self.EWM_wirefeeder_switch = False
      self.EWM_reserved_2 = False
      self.EWM_cold_wire_feed_speed = 0.
      self.EWM_job_number = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4f27BfB().pack(_x.Dinse_wire_feed_speed, _x.EWM_current, _x.EWM_plasma_gas, _x.EWM_shield_gas, _x.Dinse_start_release, _x.Dinse_acknowledge_fault, _x.Dinse_start_wire_feed, _x.Dinse_start_power_source, _x.Dinse_wirebreak, _x.Dinse_wire_forward, _x.Dinse_wire_backward, _x.Dinse_gas_on, _x.Dinse_retraction, _x.Dinse_positioning, _x.EWM_Start, _x.EWM_gas_test_1_shield, _x.EWM_gas_test_2_plasma, _x.EWM_feed_wire, _x.EWM_unfeed_wire, _x.EWM_position_search, _x.EWM_error_reset, _x.EWM_start_aux_process, _x.EWM_user_relay, _x.EWM_welding_simulation, _x.EWM_monitoring_function, _x.EWM_filler_wire_activated, _x.EWM_reserved_1, _x.EWM_weld_mode_select_bit_0, _x.EWM_weld_mode_select_bit_1, _x.EWM_wirefeeder_switch, _x.EWM_reserved_2, _x.EWM_cold_wire_feed_speed, _x.EWM_job_number))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.Dinse_wire_feed_speed, _x.EWM_current, _x.EWM_plasma_gas, _x.EWM_shield_gas, _x.Dinse_start_release, _x.Dinse_acknowledge_fault, _x.Dinse_start_wire_feed, _x.Dinse_start_power_source, _x.Dinse_wirebreak, _x.Dinse_wire_forward, _x.Dinse_wire_backward, _x.Dinse_gas_on, _x.Dinse_retraction, _x.Dinse_positioning, _x.EWM_Start, _x.EWM_gas_test_1_shield, _x.EWM_gas_test_2_plasma, _x.EWM_feed_wire, _x.EWM_unfeed_wire, _x.EWM_position_search, _x.EWM_error_reset, _x.EWM_start_aux_process, _x.EWM_user_relay, _x.EWM_welding_simulation, _x.EWM_monitoring_function, _x.EWM_filler_wire_activated, _x.EWM_reserved_1, _x.EWM_weld_mode_select_bit_0, _x.EWM_weld_mode_select_bit_1, _x.EWM_wirefeeder_switch, _x.EWM_reserved_2, _x.EWM_cold_wire_feed_speed, _x.EWM_job_number,) = _get_struct_4f27BfB().unpack(str[start:end])
      self.Dinse_start_release = bool(self.Dinse_start_release)
      self.Dinse_acknowledge_fault = bool(self.Dinse_acknowledge_fault)
      self.Dinse_start_wire_feed = bool(self.Dinse_start_wire_feed)
      self.Dinse_start_power_source = bool(self.Dinse_start_power_source)
      self.Dinse_wirebreak = bool(self.Dinse_wirebreak)
      self.Dinse_wire_forward = bool(self.Dinse_wire_forward)
      self.Dinse_wire_backward = bool(self.Dinse_wire_backward)
      self.Dinse_gas_on = bool(self.Dinse_gas_on)
      self.Dinse_retraction = bool(self.Dinse_retraction)
      self.Dinse_positioning = bool(self.Dinse_positioning)
      self.EWM_Start = bool(self.EWM_Start)
      self.EWM_gas_test_1_shield = bool(self.EWM_gas_test_1_shield)
      self.EWM_gas_test_2_plasma = bool(self.EWM_gas_test_2_plasma)
      self.EWM_feed_wire = bool(self.EWM_feed_wire)
      self.EWM_unfeed_wire = bool(self.EWM_unfeed_wire)
      self.EWM_position_search = bool(self.EWM_position_search)
      self.EWM_error_reset = bool(self.EWM_error_reset)
      self.EWM_start_aux_process = bool(self.EWM_start_aux_process)
      self.EWM_user_relay = bool(self.EWM_user_relay)
      self.EWM_welding_simulation = bool(self.EWM_welding_simulation)
      self.EWM_monitoring_function = bool(self.EWM_monitoring_function)
      self.EWM_filler_wire_activated = bool(self.EWM_filler_wire_activated)
      self.EWM_reserved_1 = bool(self.EWM_reserved_1)
      self.EWM_weld_mode_select_bit_0 = bool(self.EWM_weld_mode_select_bit_0)
      self.EWM_weld_mode_select_bit_1 = bool(self.EWM_weld_mode_select_bit_1)
      self.EWM_wirefeeder_switch = bool(self.EWM_wirefeeder_switch)
      self.EWM_reserved_2 = bool(self.EWM_reserved_2)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4f27BfB().pack(_x.Dinse_wire_feed_speed, _x.EWM_current, _x.EWM_plasma_gas, _x.EWM_shield_gas, _x.Dinse_start_release, _x.Dinse_acknowledge_fault, _x.Dinse_start_wire_feed, _x.Dinse_start_power_source, _x.Dinse_wirebreak, _x.Dinse_wire_forward, _x.Dinse_wire_backward, _x.Dinse_gas_on, _x.Dinse_retraction, _x.Dinse_positioning, _x.EWM_Start, _x.EWM_gas_test_1_shield, _x.EWM_gas_test_2_plasma, _x.EWM_feed_wire, _x.EWM_unfeed_wire, _x.EWM_position_search, _x.EWM_error_reset, _x.EWM_start_aux_process, _x.EWM_user_relay, _x.EWM_welding_simulation, _x.EWM_monitoring_function, _x.EWM_filler_wire_activated, _x.EWM_reserved_1, _x.EWM_weld_mode_select_bit_0, _x.EWM_weld_mode_select_bit_1, _x.EWM_wirefeeder_switch, _x.EWM_reserved_2, _x.EWM_cold_wire_feed_speed, _x.EWM_job_number))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.Dinse_wire_feed_speed, _x.EWM_current, _x.EWM_plasma_gas, _x.EWM_shield_gas, _x.Dinse_start_release, _x.Dinse_acknowledge_fault, _x.Dinse_start_wire_feed, _x.Dinse_start_power_source, _x.Dinse_wirebreak, _x.Dinse_wire_forward, _x.Dinse_wire_backward, _x.Dinse_gas_on, _x.Dinse_retraction, _x.Dinse_positioning, _x.EWM_Start, _x.EWM_gas_test_1_shield, _x.EWM_gas_test_2_plasma, _x.EWM_feed_wire, _x.EWM_unfeed_wire, _x.EWM_position_search, _x.EWM_error_reset, _x.EWM_start_aux_process, _x.EWM_user_relay, _x.EWM_welding_simulation, _x.EWM_monitoring_function, _x.EWM_filler_wire_activated, _x.EWM_reserved_1, _x.EWM_weld_mode_select_bit_0, _x.EWM_weld_mode_select_bit_1, _x.EWM_wirefeeder_switch, _x.EWM_reserved_2, _x.EWM_cold_wire_feed_speed, _x.EWM_job_number,) = _get_struct_4f27BfB().unpack(str[start:end])
      self.Dinse_start_release = bool(self.Dinse_start_release)
      self.Dinse_acknowledge_fault = bool(self.Dinse_acknowledge_fault)
      self.Dinse_start_wire_feed = bool(self.Dinse_start_wire_feed)
      self.Dinse_start_power_source = bool(self.Dinse_start_power_source)
      self.Dinse_wirebreak = bool(self.Dinse_wirebreak)
      self.Dinse_wire_forward = bool(self.Dinse_wire_forward)
      self.Dinse_wire_backward = bool(self.Dinse_wire_backward)
      self.Dinse_gas_on = bool(self.Dinse_gas_on)
      self.Dinse_retraction = bool(self.Dinse_retraction)
      self.Dinse_positioning = bool(self.Dinse_positioning)
      self.EWM_Start = bool(self.EWM_Start)
      self.EWM_gas_test_1_shield = bool(self.EWM_gas_test_1_shield)
      self.EWM_gas_test_2_plasma = bool(self.EWM_gas_test_2_plasma)
      self.EWM_feed_wire = bool(self.EWM_feed_wire)
      self.EWM_unfeed_wire = bool(self.EWM_unfeed_wire)
      self.EWM_position_search = bool(self.EWM_position_search)
      self.EWM_error_reset = bool(self.EWM_error_reset)
      self.EWM_start_aux_process = bool(self.EWM_start_aux_process)
      self.EWM_user_relay = bool(self.EWM_user_relay)
      self.EWM_welding_simulation = bool(self.EWM_welding_simulation)
      self.EWM_monitoring_function = bool(self.EWM_monitoring_function)
      self.EWM_filler_wire_activated = bool(self.EWM_filler_wire_activated)
      self.EWM_reserved_1 = bool(self.EWM_reserved_1)
      self.EWM_weld_mode_select_bit_0 = bool(self.EWM_weld_mode_select_bit_0)
      self.EWM_weld_mode_select_bit_1 = bool(self.EWM_weld_mode_select_bit_1)
      self.EWM_wirefeeder_switch = bool(self.EWM_wirefeeder_switch)
      self.EWM_reserved_2 = bool(self.EWM_reserved_2)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4f27BfB = None
def _get_struct_4f27BfB():
    global _struct_4f27BfB
    if _struct_4f27BfB is None:
        _struct_4f27BfB = struct.Struct("<4f27BfB")
    return _struct_4f27BfB
